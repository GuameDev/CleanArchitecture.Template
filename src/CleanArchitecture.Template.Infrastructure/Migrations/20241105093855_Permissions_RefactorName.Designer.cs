// <auto-generated />
using System;
using CleanArchitecture.Template.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanArchitecture.Template.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241105093855_Permissions_RefactorName")]
    partial class Permissions_RefactorName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.Aggregates.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f281a19-6383-434c-8e51-fffb3d7b9e00"),
                            CreatedDate = new DateTime(2024, 11, 5, 9, 38, 55, 108, DateTimeKind.Utc).AddTicks(5186),
                            Description = "Can read data",
                            Type = "Read",
                            UpdatedDate = new DateTime(2024, 11, 5, 9, 38, 55, 108, DateTimeKind.Utc).AddTicks(5186)
                        },
                        new
                        {
                            Id = new Guid("56106dce-d07b-4cbf-9af4-63c3adbe4833"),
                            CreatedDate = new DateTime(2024, 11, 5, 9, 38, 55, 108, DateTimeKind.Utc).AddTicks(5186),
                            Description = "Can modify data",
                            Type = "Write",
                            UpdatedDate = new DateTime(2024, 11, 5, 9, 38, 55, 108, DateTimeKind.Utc).AddTicks(5186)
                        },
                        new
                        {
                            Id = new Guid("a2047c9d-5c51-4d00-8a1a-659ac6e8d3e6"),
                            CreatedDate = new DateTime(2024, 11, 5, 9, 38, 55, 108, DateTimeKind.Utc).AddTicks(5186),
                            Description = "Can manage users",
                            Type = "ManageUsers",
                            UpdatedDate = new DateTime(2024, 11, 5, 9, 38, 55, 108, DateTimeKind.Utc).AddTicks(5186)
                        },
                        new
                        {
                            Id = new Guid("fdab3f8f-8108-40e9-b454-7e51cdf895f0"),
                            CreatedDate = new DateTime(2024, 11, 5, 9, 38, 55, 108, DateTimeKind.Utc).AddTicks(5186),
                            Description = "Can manage roles and permissions",
                            Type = "ManageRoles",
                            UpdatedDate = new DateTime(2024, 11, 5, 9, 38, 55, 108, DateTimeKind.Utc).AddTicks(5186)
                        },
                        new
                        {
                            Id = new Guid("12560448-04aa-426c-beb4-d32e37a0ff8e"),
                            CreatedDate = new DateTime(2024, 11, 5, 9, 38, 55, 108, DateTimeKind.Utc).AddTicks(5186),
                            Description = "Can view the dashboard",
                            Type = "ViewDashboard",
                            UpdatedDate = new DateTime(2024, 11, 5, 9, 38, 55, 108, DateTimeKind.Utc).AddTicks(5186)
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.Aggregates.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f43167dd-07a8-427d-bb45-d881e121b22c"),
                            CreatedDate = new DateTime(2024, 11, 5, 9, 38, 55, 108, DateTimeKind.Utc).AddTicks(5186),
                            RoleName = "Admin",
                            UpdatedDate = new DateTime(2024, 11, 5, 9, 38, 55, 108, DateTimeKind.Utc).AddTicks(5186)
                        },
                        new
                        {
                            Id = new Guid("1a4f9529-c954-4738-9bdf-41c928adda60"),
                            CreatedDate = new DateTime(2024, 11, 5, 9, 38, 55, 108, DateTimeKind.Utc).AddTicks(5186),
                            RoleName = "User",
                            UpdatedDate = new DateTime(2024, 11, 5, 9, 38, 55, 108, DateTimeKind.Utc).AddTicks(5186)
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.WeatherForecasts.WeatherForecast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WeatherForecasts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0967743a-ff3f-4a01-ab76-7f36de59b549"),
                            CreatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(2933),
                            Summary = "Warm",
                            UpdatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(2933)
                        },
                        new
                        {
                            Id = new Guid("95bcd318-836a-44e5-aff3-0905c2638c25"),
                            CreatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(2970),
                            Summary = "Bracing",
                            UpdatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(2970)
                        },
                        new
                        {
                            Id = new Guid("cbbb7b93-6b09-4547-9245-2272372e81ac"),
                            CreatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3023),
                            Summary = "Balmy",
                            UpdatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3023)
                        },
                        new
                        {
                            Id = new Guid("eb5d3158-1283-4ea5-ad04-012decd5dc04"),
                            CreatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3029),
                            Summary = "Bracing",
                            UpdatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3029)
                        },
                        new
                        {
                            Id = new Guid("47972eea-1161-4e91-8e6c-c96cc2e5f23d"),
                            CreatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3034),
                            Summary = "Scorching",
                            UpdatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3034)
                        },
                        new
                        {
                            Id = new Guid("51c039d2-2855-48f1-8e11-376e9cdd29b8"),
                            CreatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3046),
                            Summary = "Chilly",
                            UpdatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3046)
                        },
                        new
                        {
                            Id = new Guid("35d88bae-1d0f-41d0-907b-a1275b0d2e56"),
                            CreatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3051),
                            Summary = "Mild",
                            UpdatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3051)
                        },
                        new
                        {
                            Id = new Guid("40e7f626-55a7-49a5-9573-648382c56c0b"),
                            CreatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3260),
                            Summary = "Sweltering",
                            UpdatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3260)
                        },
                        new
                        {
                            Id = new Guid("b0dc56e2-eb02-4ddd-beb9-e9f94156713d"),
                            CreatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3264),
                            Summary = "Warm",
                            UpdatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3264)
                        },
                        new
                        {
                            Id = new Guid("ed11fe4e-c827-4056-8d95-18c34f25b8f0"),
                            CreatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3280),
                            Summary = "Cool",
                            UpdatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3280)
                        },
                        new
                        {
                            Id = new Guid("ad47fae2-83df-4ae8-bb1a-0a4cb4e4f845"),
                            CreatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3289),
                            Summary = "Hot",
                            UpdatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3289)
                        },
                        new
                        {
                            Id = new Guid("6cef9497-e904-421d-ad37-d90e59a0d236"),
                            CreatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3295),
                            Summary = "Scorching",
                            UpdatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3295)
                        },
                        new
                        {
                            Id = new Guid("5ea60fd9-899c-4518-a7f0-acd3168ae130"),
                            CreatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3300),
                            Summary = "Unknown",
                            UpdatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3300)
                        },
                        new
                        {
                            Id = new Guid("913d71e2-41f6-4a12-9763-c7cf64921432"),
                            CreatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3305),
                            Summary = "Chilly",
                            UpdatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3305)
                        },
                        new
                        {
                            Id = new Guid("e79d2f06-ebd4-48d1-8609-e6e3429071bd"),
                            CreatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3310),
                            Summary = "Unknown",
                            UpdatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3310)
                        },
                        new
                        {
                            Id = new Guid("3a5af1b0-0f3e-40a2-992c-812f3c8f398b"),
                            CreatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3316),
                            Summary = "Freezing",
                            UpdatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3316)
                        },
                        new
                        {
                            Id = new Guid("3f8f56ac-e67b-4f28-af68-dc99b570fd4d"),
                            CreatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3321),
                            Summary = "Bracing",
                            UpdatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3321)
                        },
                        new
                        {
                            Id = new Guid("2f4050dc-144d-464e-adcf-a2932805d70e"),
                            CreatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3328),
                            Summary = "Freezing",
                            UpdatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3328)
                        },
                        new
                        {
                            Id = new Guid("6e50f4f5-05a1-4a1c-8404-b5d9fa681f1a"),
                            CreatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3336),
                            Summary = "Unknown",
                            UpdatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3336)
                        },
                        new
                        {
                            Id = new Guid("dfb40841-019a-4343-82a0-c6cfe2ea57c8"),
                            CreatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3341),
                            Summary = "Bracing",
                            UpdatedDate = new DateTime(2024, 11, 5, 10, 38, 55, 108, DateTimeKind.Local).AddTicks(3341)
                        });
                });

            modelBuilder.Entity("RolePermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionId = new Guid("6f281a19-6383-434c-8e51-fffb3d7b9e00"),
                            RoleId = new Guid("f43167dd-07a8-427d-bb45-d881e121b22c")
                        },
                        new
                        {
                            Id = 2,
                            PermissionId = new Guid("56106dce-d07b-4cbf-9af4-63c3adbe4833"),
                            RoleId = new Guid("f43167dd-07a8-427d-bb45-d881e121b22c")
                        },
                        new
                        {
                            Id = 3,
                            PermissionId = new Guid("a2047c9d-5c51-4d00-8a1a-659ac6e8d3e6"),
                            RoleId = new Guid("f43167dd-07a8-427d-bb45-d881e121b22c")
                        },
                        new
                        {
                            Id = 4,
                            PermissionId = new Guid("fdab3f8f-8108-40e9-b454-7e51cdf895f0"),
                            RoleId = new Guid("f43167dd-07a8-427d-bb45-d881e121b22c")
                        },
                        new
                        {
                            Id = 5,
                            PermissionId = new Guid("12560448-04aa-426c-beb4-d32e37a0ff8e"),
                            RoleId = new Guid("f43167dd-07a8-427d-bb45-d881e121b22c")
                        },
                        new
                        {
                            Id = 6,
                            PermissionId = new Guid("6f281a19-6383-434c-8e51-fffb3d7b9e00"),
                            RoleId = new Guid("1a4f9529-c954-4738-9bdf-41c928adda60")
                        });
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.User", b =>
                {
                    b.OwnsOne("CleanArchitecture.Template.Domain.Users.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName1");

                            b1.Property<string>("LastName2")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName2");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("CleanArchitecture.Template.Domain.Users.ValueObjects.Username", "Username", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Username");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("Username")
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.WeatherForecasts.WeatherForecast", b =>
                {
                    b.OwnsOne("CleanArchitecture.Template.Domain.WeatherForecasts.ValueObjects.Temperature", "Temperature", b1 =>
                        {
                            b1.Property<Guid>("WeatherForecastId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("TemperatureType");

                            b1.Property<double>("Value")
                                .HasColumnType("float")
                                .HasColumnName("TemperatureValue");

                            b1.HasKey("WeatherForecastId");

                            b1.ToTable("WeatherForecasts");

                            b1.WithOwner()
                                .HasForeignKey("WeatherForecastId");

                            b1.HasData(
                                new
                                {
                                    WeatherForecastId = new Guid("0967743a-ff3f-4a01-ab76-7f36de59b549"),
                                    Type = "Celsius",
                                    Value = 13.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("95bcd318-836a-44e5-aff3-0905c2638c25"),
                                    Type = "Celsius",
                                    Value = 30.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("cbbb7b93-6b09-4547-9245-2272372e81ac"),
                                    Type = "Celsius",
                                    Value = 13.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("eb5d3158-1283-4ea5-ad04-012decd5dc04"),
                                    Type = "Fahrenheit",
                                    Value = 16.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("47972eea-1161-4e91-8e6c-c96cc2e5f23d"),
                                    Type = "Celsius",
                                    Value = 19.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("51c039d2-2855-48f1-8e11-376e9cdd29b8"),
                                    Type = "Celsius",
                                    Value = 6.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("35d88bae-1d0f-41d0-907b-a1275b0d2e56"),
                                    Type = "Fahrenheit",
                                    Value = 34.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("40e7f626-55a7-49a5-9573-648382c56c0b"),
                                    Type = "Fahrenheit",
                                    Value = 8.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("b0dc56e2-eb02-4ddd-beb9-e9f94156713d"),
                                    Type = "Fahrenheit",
                                    Value = 15.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("ed11fe4e-c827-4056-8d95-18c34f25b8f0"),
                                    Type = "Fahrenheit",
                                    Value = 27.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("ad47fae2-83df-4ae8-bb1a-0a4cb4e4f845"),
                                    Type = "Fahrenheit",
                                    Value = 15.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("6cef9497-e904-421d-ad37-d90e59a0d236"),
                                    Type = "Fahrenheit",
                                    Value = 15.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("5ea60fd9-899c-4518-a7f0-acd3168ae130"),
                                    Type = "Fahrenheit",
                                    Value = 23.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("913d71e2-41f6-4a12-9763-c7cf64921432"),
                                    Type = "Celsius",
                                    Value = 31.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("e79d2f06-ebd4-48d1-8609-e6e3429071bd"),
                                    Type = "Fahrenheit",
                                    Value = -3.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("3a5af1b0-0f3e-40a2-992c-812f3c8f398b"),
                                    Type = "Celsius",
                                    Value = 5.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("3f8f56ac-e67b-4f28-af68-dc99b570fd4d"),
                                    Type = "Celsius",
                                    Value = 4.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("2f4050dc-144d-464e-adcf-a2932805d70e"),
                                    Type = "Fahrenheit",
                                    Value = -2.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("6e50f4f5-05a1-4a1c-8404-b5d9fa681f1a"),
                                    Type = "Celsius",
                                    Value = 14.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("dfb40841-019a-4343-82a0-c6cfe2ea57c8"),
                                    Type = "Fahrenheit",
                                    Value = -3.0
                                });
                        });

                    b.OwnsOne("CleanArchitecture.Template.Domain.WeatherForecasts.ValueObjects.WeatherDate", "Date", b1 =>
                        {
                            b1.Property<Guid>("WeatherForecastId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateOnly>("Value")
                                .HasColumnType("date")
                                .HasColumnName("Date");

                            b1.HasKey("WeatherForecastId");

                            b1.ToTable("WeatherForecasts");

                            b1.WithOwner()
                                .HasForeignKey("WeatherForecastId");

                            b1.HasData(
                                new
                                {
                                    WeatherForecastId = new Guid("0967743a-ff3f-4a01-ab76-7f36de59b549"),
                                    Value = new DateOnly(2026, 6, 18)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("95bcd318-836a-44e5-aff3-0905c2638c25"),
                                    Value = new DateOnly(2025, 7, 13)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("cbbb7b93-6b09-4547-9245-2272372e81ac"),
                                    Value = new DateOnly(2024, 6, 12)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("eb5d3158-1283-4ea5-ad04-012decd5dc04"),
                                    Value = new DateOnly(2025, 1, 6)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("47972eea-1161-4e91-8e6c-c96cc2e5f23d"),
                                    Value = new DateOnly(2026, 1, 8)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("51c039d2-2855-48f1-8e11-376e9cdd29b8"),
                                    Value = new DateOnly(2026, 8, 10)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("35d88bae-1d0f-41d0-907b-a1275b0d2e56"),
                                    Value = new DateOnly(2025, 10, 1)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("40e7f626-55a7-49a5-9573-648382c56c0b"),
                                    Value = new DateOnly(2026, 11, 14)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("b0dc56e2-eb02-4ddd-beb9-e9f94156713d"),
                                    Value = new DateOnly(2026, 6, 7)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("ed11fe4e-c827-4056-8d95-18c34f25b8f0"),
                                    Value = new DateOnly(2027, 6, 12)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("ad47fae2-83df-4ae8-bb1a-0a4cb4e4f845"),
                                    Value = new DateOnly(2023, 1, 9)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("6cef9497-e904-421d-ad37-d90e59a0d236"),
                                    Value = new DateOnly(2022, 7, 29)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("5ea60fd9-899c-4518-a7f0-acd3168ae130"),
                                    Value = new DateOnly(2026, 7, 4)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("913d71e2-41f6-4a12-9763-c7cf64921432"),
                                    Value = new DateOnly(2025, 9, 21)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("e79d2f06-ebd4-48d1-8609-e6e3429071bd"),
                                    Value = new DateOnly(2027, 4, 19)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("3a5af1b0-0f3e-40a2-992c-812f3c8f398b"),
                                    Value = new DateOnly(2025, 2, 4)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("3f8f56ac-e67b-4f28-af68-dc99b570fd4d"),
                                    Value = new DateOnly(2027, 5, 30)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("2f4050dc-144d-464e-adcf-a2932805d70e"),
                                    Value = new DateOnly(2022, 7, 30)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("6e50f4f5-05a1-4a1c-8404-b5d9fa681f1a"),
                                    Value = new DateOnly(2024, 6, 18)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("dfb40841-019a-4343-82a0-c6cfe2ea57c8"),
                                    Value = new DateOnly(2022, 11, 10)
                                });
                        });

                    b.Navigation("Date")
                        .IsRequired();

                    b.Navigation("Temperature")
                        .IsRequired();
                });

            modelBuilder.Entity("RolePermissions", b =>
                {
                    b.HasOne("CleanArchitecture.Template.Domain.Users.Aggregates.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Template.Domain.Users.Aggregates.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.HasOne("CleanArchitecture.Template.Domain.Users.Aggregates.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Template.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
