// <auto-generated />
using System;
using CleanArchitecture.Template.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanArchitecture.Template.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.Aggregates.Permissions.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3c11234-56b8-4e89-91f4-21e1e69e76fa"),
                            CreatedDate = new DateTime(2024, 11, 10, 14, 45, 45, 95, DateTimeKind.Utc).AddTicks(1759),
                            Description = "Can read data",
                            Type = "Read",
                            UpdatedDate = new DateTime(2024, 11, 10, 14, 45, 45, 95, DateTimeKind.Utc).AddTicks(1759)
                        },
                        new
                        {
                            Id = new Guid("d4b732bc-0a9d-420f-8c2d-5911dbe24d6d"),
                            CreatedDate = new DateTime(2024, 11, 10, 14, 45, 45, 95, DateTimeKind.Utc).AddTicks(1759),
                            Description = "Can modify data",
                            Type = "Write",
                            UpdatedDate = new DateTime(2024, 11, 10, 14, 45, 45, 95, DateTimeKind.Utc).AddTicks(1759)
                        },
                        new
                        {
                            Id = new Guid("e5f01b6d-1b3e-4919-9b24-7c3e61f1f91b"),
                            CreatedDate = new DateTime(2024, 11, 10, 14, 45, 45, 95, DateTimeKind.Utc).AddTicks(1759),
                            Description = "Can manage users",
                            Type = "ManageUsers",
                            UpdatedDate = new DateTime(2024, 11, 10, 14, 45, 45, 95, DateTimeKind.Utc).AddTicks(1759)
                        },
                        new
                        {
                            Id = new Guid("f6027a94-318d-4d13-b78f-9277cd3f7086"),
                            CreatedDate = new DateTime(2024, 11, 10, 14, 45, 45, 95, DateTimeKind.Utc).AddTicks(1759),
                            Description = "Can manage roles and permissions",
                            Type = "ManageRoles",
                            UpdatedDate = new DateTime(2024, 11, 10, 14, 45, 45, 95, DateTimeKind.Utc).AddTicks(1759)
                        },
                        new
                        {
                            Id = new Guid("a8b61357-15f2-48a1-9114-2d2d885de8c1"),
                            CreatedDate = new DateTime(2024, 11, 10, 14, 45, 45, 95, DateTimeKind.Utc).AddTicks(1759),
                            Description = "Can view the dashboard",
                            Type = "ViewDashboard",
                            UpdatedDate = new DateTime(2024, 11, 10, 14, 45, 45, 95, DateTimeKind.Utc).AddTicks(1759)
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.Aggregates.RefreshTokens.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.Aggregates.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a37f1b12-6d0c-4d52-a4e5-b84adf6d184c"),
                            CreatedDate = new DateTime(2024, 11, 10, 14, 45, 45, 95, DateTimeKind.Utc).AddTicks(1759),
                            RoleName = "Admin",
                            UpdatedDate = new DateTime(2024, 11, 10, 14, 45, 45, 95, DateTimeKind.Utc).AddTicks(1759)
                        },
                        new
                        {
                            Id = new Guid("b2e8e3f6-c8f1-45db-8c7a-a7e14c680bfb"),
                            CreatedDate = new DateTime(2024, 11, 10, 14, 45, 45, 95, DateTimeKind.Utc).AddTicks(1759),
                            RoleName = "User",
                            UpdatedDate = new DateTime(2024, 11, 10, 14, 45, 45, 95, DateTimeKind.Utc).AddTicks(1759)
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.WeatherForecasts.WeatherForecast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WeatherForecasts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("320e2a87-f439-4834-bf9d-b555529b5a29"),
                            CreatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1078),
                            Summary = "Cool",
                            UpdatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1078)
                        },
                        new
                        {
                            Id = new Guid("03cb802e-922e-4fb6-b4fc-9d1caa7052f8"),
                            CreatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1094),
                            Summary = "Freezing",
                            UpdatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1094)
                        },
                        new
                        {
                            Id = new Guid("a06116b9-9712-4af4-9a2c-ca4057a32c3c"),
                            CreatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1128),
                            Summary = "Freezing",
                            UpdatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1128)
                        },
                        new
                        {
                            Id = new Guid("d21a4710-2e64-4584-840f-9f5926cf4fd2"),
                            CreatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1131),
                            Summary = "Chilly",
                            UpdatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1131)
                        },
                        new
                        {
                            Id = new Guid("0c912451-18a3-4cfd-89dc-ef62db54b5c1"),
                            CreatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1135),
                            Summary = "Unknown",
                            UpdatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1135)
                        },
                        new
                        {
                            Id = new Guid("338c71ff-91ec-4dd8-baa2-208f479505cb"),
                            CreatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1156),
                            Summary = "Bracing",
                            UpdatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1156)
                        },
                        new
                        {
                            Id = new Guid("6939a6dc-bd06-4670-960c-6e32414fbbd1"),
                            CreatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1159),
                            Summary = "Scorching",
                            UpdatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1159)
                        },
                        new
                        {
                            Id = new Guid("32028c33-6c1e-4bd5-9edd-dbe144785601"),
                            CreatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1162),
                            Summary = "Unknown",
                            UpdatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1162)
                        },
                        new
                        {
                            Id = new Guid("95934958-1bb2-436f-afcb-0ac2822aa6b9"),
                            CreatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1166),
                            Summary = "Bracing",
                            UpdatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1166)
                        },
                        new
                        {
                            Id = new Guid("b20b1228-e56c-42e7-b929-b6c9dcefab4c"),
                            CreatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1171),
                            Summary = "Scorching",
                            UpdatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1171)
                        },
                        new
                        {
                            Id = new Guid("255e6c53-f329-4758-b73c-ecfc0d81c620"),
                            CreatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1174),
                            Summary = "Chilly",
                            UpdatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1174)
                        },
                        new
                        {
                            Id = new Guid("d50fa582-be68-43fd-9bfa-a35608acb28d"),
                            CreatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1178),
                            Summary = "Scorching",
                            UpdatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1178)
                        },
                        new
                        {
                            Id = new Guid("5889e7f6-625c-47db-8638-19bc76f1e638"),
                            CreatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1181),
                            Summary = "Scorching",
                            UpdatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1181)
                        },
                        new
                        {
                            Id = new Guid("8cdc6177-9cf9-4bca-acde-c0af6ac70f89"),
                            CreatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1187),
                            Summary = "Sweltering",
                            UpdatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1187)
                        },
                        new
                        {
                            Id = new Guid("85c21b1b-8def-48f0-8a3f-3efaf3cf5671"),
                            CreatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1191),
                            Summary = "Warm",
                            UpdatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1191)
                        },
                        new
                        {
                            Id = new Guid("10551331-8f13-49ae-8386-4e355cf4c512"),
                            CreatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1194),
                            Summary = "Cool",
                            UpdatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1194)
                        },
                        new
                        {
                            Id = new Guid("f6a65463-8f04-4afc-b871-876fc7154ec0"),
                            CreatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1197),
                            Summary = "Sweltering",
                            UpdatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1197)
                        },
                        new
                        {
                            Id = new Guid("0509733a-7d1e-4f7c-83a5-f3491014ed0b"),
                            CreatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1202),
                            Summary = "Cool",
                            UpdatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1202)
                        },
                        new
                        {
                            Id = new Guid("92c812e2-61e9-4962-b123-734237dc7e23"),
                            CreatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1205),
                            Summary = "Freezing",
                            UpdatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1205)
                        },
                        new
                        {
                            Id = new Guid("dc9f12a2-020f-4fd3-a244-918003508078"),
                            CreatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1208),
                            Summary = "Balmy",
                            UpdatedDate = new DateTime(2024, 11, 10, 15, 45, 45, 95, DateTimeKind.Local).AddTicks(1208)
                        });
                });

            modelBuilder.Entity("RolePermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionId = new Guid("c3c11234-56b8-4e89-91f4-21e1e69e76fa"),
                            RoleId = new Guid("a37f1b12-6d0c-4d52-a4e5-b84adf6d184c")
                        },
                        new
                        {
                            Id = 2,
                            PermissionId = new Guid("d4b732bc-0a9d-420f-8c2d-5911dbe24d6d"),
                            RoleId = new Guid("a37f1b12-6d0c-4d52-a4e5-b84adf6d184c")
                        },
                        new
                        {
                            Id = 3,
                            PermissionId = new Guid("e5f01b6d-1b3e-4919-9b24-7c3e61f1f91b"),
                            RoleId = new Guid("a37f1b12-6d0c-4d52-a4e5-b84adf6d184c")
                        },
                        new
                        {
                            Id = 4,
                            PermissionId = new Guid("f6027a94-318d-4d13-b78f-9277cd3f7086"),
                            RoleId = new Guid("a37f1b12-6d0c-4d52-a4e5-b84adf6d184c")
                        },
                        new
                        {
                            Id = 5,
                            PermissionId = new Guid("a8b61357-15f2-48a1-9114-2d2d885de8c1"),
                            RoleId = new Guid("a37f1b12-6d0c-4d52-a4e5-b84adf6d184c")
                        },
                        new
                        {
                            Id = 6,
                            PermissionId = new Guid("c3c11234-56b8-4e89-91f4-21e1e69e76fa"),
                            RoleId = new Guid("b2e8e3f6-c8f1-45db-8c7a-a7e14c680bfb")
                        });
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.Aggregates.RefreshTokens.RefreshToken", b =>
                {
                    b.HasOne("CleanArchitecture.Template.Domain.Users.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.User", b =>
                {
                    b.OwnsOne("CleanArchitecture.Template.Domain.Users.ValueObjects.FullNames.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName1");

                            b1.Property<string>("LastName2")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName2");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("CleanArchitecture.Template.Domain.Users.ValueObjects.Usernames.Username", "Username", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Username");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("Username")
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.WeatherForecasts.WeatherForecast", b =>
                {
                    b.OwnsOne("CleanArchitecture.Template.Domain.WeatherForecasts.ValueObjects.Temperature", "Temperature", b1 =>
                        {
                            b1.Property<Guid>("WeatherForecastId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("TemperatureType");

                            b1.Property<double>("Value")
                                .HasColumnType("float")
                                .HasColumnName("TemperatureValue");

                            b1.HasKey("WeatherForecastId");

                            b1.ToTable("WeatherForecasts");

                            b1.WithOwner()
                                .HasForeignKey("WeatherForecastId");

                            b1.HasData(
                                new
                                {
                                    WeatherForecastId = new Guid("320e2a87-f439-4834-bf9d-b555529b5a29"),
                                    Type = "Fahrenheit",
                                    Value = 0.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("03cb802e-922e-4fb6-b4fc-9d1caa7052f8"),
                                    Type = "Celsius",
                                    Value = 9.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("a06116b9-9712-4af4-9a2c-ca4057a32c3c"),
                                    Type = "Celsius",
                                    Value = 26.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("d21a4710-2e64-4584-840f-9f5926cf4fd2"),
                                    Type = "Celsius",
                                    Value = 26.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("0c912451-18a3-4cfd-89dc-ef62db54b5c1"),
                                    Type = "Celsius",
                                    Value = 10.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("338c71ff-91ec-4dd8-baa2-208f479505cb"),
                                    Type = "Fahrenheit",
                                    Value = 34.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("6939a6dc-bd06-4670-960c-6e32414fbbd1"),
                                    Type = "Fahrenheit",
                                    Value = 20.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("32028c33-6c1e-4bd5-9edd-dbe144785601"),
                                    Type = "Celsius",
                                    Value = 27.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("95934958-1bb2-436f-afcb-0ac2822aa6b9"),
                                    Type = "Fahrenheit",
                                    Value = 25.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("b20b1228-e56c-42e7-b929-b6c9dcefab4c"),
                                    Type = "Celsius",
                                    Value = 1.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("255e6c53-f329-4758-b73c-ecfc0d81c620"),
                                    Type = "Celsius",
                                    Value = 24.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("d50fa582-be68-43fd-9bfa-a35608acb28d"),
                                    Type = "Fahrenheit",
                                    Value = 30.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("5889e7f6-625c-47db-8638-19bc76f1e638"),
                                    Type = "Celsius",
                                    Value = 3.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("8cdc6177-9cf9-4bca-acde-c0af6ac70f89"),
                                    Type = "Celsius",
                                    Value = 7.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("85c21b1b-8def-48f0-8a3f-3efaf3cf5671"),
                                    Type = "Celsius",
                                    Value = -4.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("10551331-8f13-49ae-8386-4e355cf4c512"),
                                    Type = "Celsius",
                                    Value = 19.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("f6a65463-8f04-4afc-b871-876fc7154ec0"),
                                    Type = "Fahrenheit",
                                    Value = 2.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("0509733a-7d1e-4f7c-83a5-f3491014ed0b"),
                                    Type = "Celsius",
                                    Value = 2.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("92c812e2-61e9-4962-b123-734237dc7e23"),
                                    Type = "Celsius",
                                    Value = 16.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("dc9f12a2-020f-4fd3-a244-918003508078"),
                                    Type = "Celsius",
                                    Value = 12.0
                                });
                        });

                    b.OwnsOne("CleanArchitecture.Template.Domain.WeatherForecasts.ValueObjects.WeatherDate", "Date", b1 =>
                        {
                            b1.Property<Guid>("WeatherForecastId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateOnly>("Value")
                                .HasColumnType("date")
                                .HasColumnName("Date");

                            b1.HasKey("WeatherForecastId");

                            b1.ToTable("WeatherForecasts");

                            b1.WithOwner()
                                .HasForeignKey("WeatherForecastId");

                            b1.HasData(
                                new
                                {
                                    WeatherForecastId = new Guid("320e2a87-f439-4834-bf9d-b555529b5a29"),
                                    Value = new DateOnly(2022, 6, 8)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("03cb802e-922e-4fb6-b4fc-9d1caa7052f8"),
                                    Value = new DateOnly(2022, 4, 15)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("a06116b9-9712-4af4-9a2c-ca4057a32c3c"),
                                    Value = new DateOnly(2023, 1, 12)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("d21a4710-2e64-4584-840f-9f5926cf4fd2"),
                                    Value = new DateOnly(2024, 5, 7)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("0c912451-18a3-4cfd-89dc-ef62db54b5c1"),
                                    Value = new DateOnly(2026, 7, 5)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("338c71ff-91ec-4dd8-baa2-208f479505cb"),
                                    Value = new DateOnly(2022, 2, 24)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("6939a6dc-bd06-4670-960c-6e32414fbbd1"),
                                    Value = new DateOnly(2022, 7, 27)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("32028c33-6c1e-4bd5-9edd-dbe144785601"),
                                    Value = new DateOnly(2024, 4, 17)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("95934958-1bb2-436f-afcb-0ac2822aa6b9"),
                                    Value = new DateOnly(2026, 4, 19)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("b20b1228-e56c-42e7-b929-b6c9dcefab4c"),
                                    Value = new DateOnly(2022, 11, 24)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("255e6c53-f329-4758-b73c-ecfc0d81c620"),
                                    Value = new DateOnly(2025, 1, 3)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("d50fa582-be68-43fd-9bfa-a35608acb28d"),
                                    Value = new DateOnly(2024, 4, 12)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("5889e7f6-625c-47db-8638-19bc76f1e638"),
                                    Value = new DateOnly(2025, 8, 31)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("8cdc6177-9cf9-4bca-acde-c0af6ac70f89"),
                                    Value = new DateOnly(2024, 7, 6)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("85c21b1b-8def-48f0-8a3f-3efaf3cf5671"),
                                    Value = new DateOnly(2025, 3, 15)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("10551331-8f13-49ae-8386-4e355cf4c512"),
                                    Value = new DateOnly(2023, 4, 7)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("f6a65463-8f04-4afc-b871-876fc7154ec0"),
                                    Value = new DateOnly(2023, 11, 27)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("0509733a-7d1e-4f7c-83a5-f3491014ed0b"),
                                    Value = new DateOnly(2023, 3, 4)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("92c812e2-61e9-4962-b123-734237dc7e23"),
                                    Value = new DateOnly(2022, 6, 12)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("dc9f12a2-020f-4fd3-a244-918003508078"),
                                    Value = new DateOnly(2026, 4, 4)
                                });
                        });

                    b.Navigation("Date")
                        .IsRequired();

                    b.Navigation("Temperature")
                        .IsRequired();
                });

            modelBuilder.Entity("RolePermissions", b =>
                {
                    b.HasOne("CleanArchitecture.Template.Domain.Users.Aggregates.Permissions.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Template.Domain.Users.Aggregates.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.HasOne("CleanArchitecture.Template.Domain.Users.Aggregates.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Template.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
