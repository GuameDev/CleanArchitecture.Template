// <auto-generated />
using System;
using CleanArchitecture.Template.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanArchitecture.Template.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.Aggregates.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba40ca1e-fcdc-4a5d-8350-4ab5b12914b2"),
                            CreatedDate = new DateTime(2024, 11, 10, 10, 47, 36, 473, DateTimeKind.Utc).AddTicks(8074),
                            Description = "Can read data",
                            Type = "Read",
                            UpdatedDate = new DateTime(2024, 11, 10, 10, 47, 36, 473, DateTimeKind.Utc).AddTicks(8074)
                        },
                        new
                        {
                            Id = new Guid("197bfdbe-728d-49fd-8f51-90366c35afbd"),
                            CreatedDate = new DateTime(2024, 11, 10, 10, 47, 36, 473, DateTimeKind.Utc).AddTicks(8074),
                            Description = "Can modify data",
                            Type = "Write",
                            UpdatedDate = new DateTime(2024, 11, 10, 10, 47, 36, 473, DateTimeKind.Utc).AddTicks(8074)
                        },
                        new
                        {
                            Id = new Guid("6e99d5d9-d4a0-441c-aae5-52f94ec857e5"),
                            CreatedDate = new DateTime(2024, 11, 10, 10, 47, 36, 473, DateTimeKind.Utc).AddTicks(8074),
                            Description = "Can manage users",
                            Type = "ManageUsers",
                            UpdatedDate = new DateTime(2024, 11, 10, 10, 47, 36, 473, DateTimeKind.Utc).AddTicks(8074)
                        },
                        new
                        {
                            Id = new Guid("9590cc01-1056-4231-97e5-f41f28c5776e"),
                            CreatedDate = new DateTime(2024, 11, 10, 10, 47, 36, 473, DateTimeKind.Utc).AddTicks(8074),
                            Description = "Can manage roles and permissions",
                            Type = "ManageRoles",
                            UpdatedDate = new DateTime(2024, 11, 10, 10, 47, 36, 473, DateTimeKind.Utc).AddTicks(8074)
                        },
                        new
                        {
                            Id = new Guid("f9d77762-cfe8-431a-ad44-4b7aaddfd018"),
                            CreatedDate = new DateTime(2024, 11, 10, 10, 47, 36, 473, DateTimeKind.Utc).AddTicks(8074),
                            Description = "Can view the dashboard",
                            Type = "ViewDashboard",
                            UpdatedDate = new DateTime(2024, 11, 10, 10, 47, 36, 473, DateTimeKind.Utc).AddTicks(8074)
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.Aggregates.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.Aggregates.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f3e7bae-39e0-46de-8c25-8c5d9454bf76"),
                            CreatedDate = new DateTime(2024, 11, 10, 10, 47, 36, 473, DateTimeKind.Utc).AddTicks(8074),
                            RoleName = "Admin",
                            UpdatedDate = new DateTime(2024, 11, 10, 10, 47, 36, 473, DateTimeKind.Utc).AddTicks(8074)
                        },
                        new
                        {
                            Id = new Guid("984ce415-1ea3-45fe-9df9-39c861db5f97"),
                            CreatedDate = new DateTime(2024, 11, 10, 10, 47, 36, 473, DateTimeKind.Utc).AddTicks(8074),
                            RoleName = "User",
                            UpdatedDate = new DateTime(2024, 11, 10, 10, 47, 36, 473, DateTimeKind.Utc).AddTicks(8074)
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.WeatherForecasts.WeatherForecast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WeatherForecasts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce23e7ad-33b0-421d-b7e1-8cca54ae0bfa"),
                            CreatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7472),
                            Summary = "Cool",
                            UpdatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7472)
                        },
                        new
                        {
                            Id = new Guid("00de5867-d543-45bd-b0c5-05760d9ead0e"),
                            CreatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7486),
                            Summary = "Bracing",
                            UpdatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7486)
                        },
                        new
                        {
                            Id = new Guid("409b7aca-37d2-4e46-8efc-a3a7adaf45f7"),
                            CreatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7492),
                            Summary = "Unknown",
                            UpdatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7492)
                        },
                        new
                        {
                            Id = new Guid("a04c880f-e307-4db7-9039-4b17dab631d8"),
                            CreatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7498),
                            Summary = "Hot",
                            UpdatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7498)
                        },
                        new
                        {
                            Id = new Guid("242e3a01-6d8e-4c7a-94b7-e7767163566e"),
                            CreatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7504),
                            Summary = "Unknown",
                            UpdatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7504)
                        },
                        new
                        {
                            Id = new Guid("c72b81b9-c074-4698-ad65-395a8d9c223c"),
                            CreatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7514),
                            Summary = "Bracing",
                            UpdatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7514)
                        },
                        new
                        {
                            Id = new Guid("b6854d34-4395-47ac-8168-364c13039d34"),
                            CreatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7520),
                            Summary = "Balmy",
                            UpdatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7520)
                        },
                        new
                        {
                            Id = new Guid("9e7351cf-39a4-48ad-9539-ea89cf3e16dc"),
                            CreatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7526),
                            Summary = "Warm",
                            UpdatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7526)
                        },
                        new
                        {
                            Id = new Guid("90e0b543-2da0-474c-a289-b29cfddf453b"),
                            CreatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7536),
                            Summary = "Mild",
                            UpdatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7536)
                        },
                        new
                        {
                            Id = new Guid("92e23374-a39d-42ad-b6b0-5be57a649afc"),
                            CreatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7545),
                            Summary = "Warm",
                            UpdatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7545)
                        },
                        new
                        {
                            Id = new Guid("2029f92e-81c4-46f7-a8a1-d4f11c5fc5a5"),
                            CreatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7551),
                            Summary = "Mild",
                            UpdatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7551)
                        },
                        new
                        {
                            Id = new Guid("a20d3b85-3301-4eee-8541-6be816721489"),
                            CreatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7556),
                            Summary = "Balmy",
                            UpdatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7556)
                        },
                        new
                        {
                            Id = new Guid("1a54aa53-d7e1-4629-8fc0-76e39d05c159"),
                            CreatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7562),
                            Summary = "Freezing",
                            UpdatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7562)
                        },
                        new
                        {
                            Id = new Guid("1cf3a799-acca-4402-b11d-5e960e26e173"),
                            CreatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7568),
                            Summary = "Hot",
                            UpdatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7568)
                        },
                        new
                        {
                            Id = new Guid("b02426f2-2001-4e3a-82c0-eacdb72d9047"),
                            CreatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7573),
                            Summary = "Unknown",
                            UpdatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7573)
                        },
                        new
                        {
                            Id = new Guid("34e2dca4-e2d4-45ad-b19b-2fb3e4528690"),
                            CreatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7579),
                            Summary = "Balmy",
                            UpdatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7579)
                        },
                        new
                        {
                            Id = new Guid("8423b65e-9aef-4c1e-84d4-0b87588582c6"),
                            CreatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7587),
                            Summary = "Scorching",
                            UpdatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7587)
                        },
                        new
                        {
                            Id = new Guid("8490e99d-9ab0-4adc-be13-4e30cd67e905"),
                            CreatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7596),
                            Summary = "Freezing",
                            UpdatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7596)
                        },
                        new
                        {
                            Id = new Guid("615af106-905d-49f8-8956-115d140fdd73"),
                            CreatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7602),
                            Summary = "Freezing",
                            UpdatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7602)
                        },
                        new
                        {
                            Id = new Guid("03e1d04c-b96e-45b4-bdb8-4761fbb89edd"),
                            CreatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7608),
                            Summary = "Unknown",
                            UpdatedDate = new DateTime(2024, 11, 10, 11, 47, 36, 473, DateTimeKind.Local).AddTicks(7608)
                        });
                });

            modelBuilder.Entity("RolePermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionId = new Guid("ba40ca1e-fcdc-4a5d-8350-4ab5b12914b2"),
                            RoleId = new Guid("1f3e7bae-39e0-46de-8c25-8c5d9454bf76")
                        },
                        new
                        {
                            Id = 2,
                            PermissionId = new Guid("197bfdbe-728d-49fd-8f51-90366c35afbd"),
                            RoleId = new Guid("1f3e7bae-39e0-46de-8c25-8c5d9454bf76")
                        },
                        new
                        {
                            Id = 3,
                            PermissionId = new Guid("6e99d5d9-d4a0-441c-aae5-52f94ec857e5"),
                            RoleId = new Guid("1f3e7bae-39e0-46de-8c25-8c5d9454bf76")
                        },
                        new
                        {
                            Id = 4,
                            PermissionId = new Guid("9590cc01-1056-4231-97e5-f41f28c5776e"),
                            RoleId = new Guid("1f3e7bae-39e0-46de-8c25-8c5d9454bf76")
                        },
                        new
                        {
                            Id = 5,
                            PermissionId = new Guid("f9d77762-cfe8-431a-ad44-4b7aaddfd018"),
                            RoleId = new Guid("1f3e7bae-39e0-46de-8c25-8c5d9454bf76")
                        },
                        new
                        {
                            Id = 6,
                            PermissionId = new Guid("ba40ca1e-fcdc-4a5d-8350-4ab5b12914b2"),
                            RoleId = new Guid("984ce415-1ea3-45fe-9df9-39c861db5f97")
                        });
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.Aggregates.RefreshToken", b =>
                {
                    b.HasOne("CleanArchitecture.Template.Domain.Users.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.User", b =>
                {
                    b.OwnsOne("CleanArchitecture.Template.Domain.Users.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName1");

                            b1.Property<string>("LastName2")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName2");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("CleanArchitecture.Template.Domain.Users.ValueObjects.Username", "Username", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Username");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("Username")
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.WeatherForecasts.WeatherForecast", b =>
                {
                    b.OwnsOne("CleanArchitecture.Template.Domain.WeatherForecasts.ValueObjects.Temperature", "Temperature", b1 =>
                        {
                            b1.Property<Guid>("WeatherForecastId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("TemperatureType");

                            b1.Property<double>("Value")
                                .HasColumnType("float")
                                .HasColumnName("TemperatureValue");

                            b1.HasKey("WeatherForecastId");

                            b1.ToTable("WeatherForecasts");

                            b1.WithOwner()
                                .HasForeignKey("WeatherForecastId");

                            b1.HasData(
                                new
                                {
                                    WeatherForecastId = new Guid("ce23e7ad-33b0-421d-b7e1-8cca54ae0bfa"),
                                    Type = "Celsius",
                                    Value = 6.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("00de5867-d543-45bd-b0c5-05760d9ead0e"),
                                    Type = "Fahrenheit",
                                    Value = 18.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("409b7aca-37d2-4e46-8efc-a3a7adaf45f7"),
                                    Type = "Celsius",
                                    Value = 15.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("a04c880f-e307-4db7-9039-4b17dab631d8"),
                                    Type = "Fahrenheit",
                                    Value = -3.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("242e3a01-6d8e-4c7a-94b7-e7767163566e"),
                                    Type = "Fahrenheit",
                                    Value = 25.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("c72b81b9-c074-4698-ad65-395a8d9c223c"),
                                    Type = "Celsius",
                                    Value = 3.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("b6854d34-4395-47ac-8168-364c13039d34"),
                                    Type = "Celsius",
                                    Value = 12.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("9e7351cf-39a4-48ad-9539-ea89cf3e16dc"),
                                    Type = "Celsius",
                                    Value = 19.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("90e0b543-2da0-474c-a289-b29cfddf453b"),
                                    Type = "Celsius",
                                    Value = -5.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("92e23374-a39d-42ad-b6b0-5be57a649afc"),
                                    Type = "Celsius",
                                    Value = 31.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("2029f92e-81c4-46f7-a8a1-d4f11c5fc5a5"),
                                    Type = "Fahrenheit",
                                    Value = 23.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("a20d3b85-3301-4eee-8541-6be816721489"),
                                    Type = "Celsius",
                                    Value = 6.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("1a54aa53-d7e1-4629-8fc0-76e39d05c159"),
                                    Type = "Fahrenheit",
                                    Value = 21.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("1cf3a799-acca-4402-b11d-5e960e26e173"),
                                    Type = "Fahrenheit",
                                    Value = 14.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("b02426f2-2001-4e3a-82c0-eacdb72d9047"),
                                    Type = "Fahrenheit",
                                    Value = 8.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("34e2dca4-e2d4-45ad-b19b-2fb3e4528690"),
                                    Type = "Fahrenheit",
                                    Value = 14.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("8423b65e-9aef-4c1e-84d4-0b87588582c6"),
                                    Type = "Celsius",
                                    Value = 30.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("8490e99d-9ab0-4adc-be13-4e30cd67e905"),
                                    Type = "Celsius",
                                    Value = 20.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("615af106-905d-49f8-8956-115d140fdd73"),
                                    Type = "Fahrenheit",
                                    Value = 34.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("03e1d04c-b96e-45b4-bdb8-4761fbb89edd"),
                                    Type = "Fahrenheit",
                                    Value = 14.0
                                });
                        });

                    b.OwnsOne("CleanArchitecture.Template.Domain.WeatherForecasts.ValueObjects.WeatherDate", "Date", b1 =>
                        {
                            b1.Property<Guid>("WeatherForecastId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateOnly>("Value")
                                .HasColumnType("date")
                                .HasColumnName("Date");

                            b1.HasKey("WeatherForecastId");

                            b1.ToTable("WeatherForecasts");

                            b1.WithOwner()
                                .HasForeignKey("WeatherForecastId");

                            b1.HasData(
                                new
                                {
                                    WeatherForecastId = new Guid("ce23e7ad-33b0-421d-b7e1-8cca54ae0bfa"),
                                    Value = new DateOnly(2027, 3, 4)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("00de5867-d543-45bd-b0c5-05760d9ead0e"),
                                    Value = new DateOnly(2023, 11, 12)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("409b7aca-37d2-4e46-8efc-a3a7adaf45f7"),
                                    Value = new DateOnly(2025, 12, 9)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("a04c880f-e307-4db7-9039-4b17dab631d8"),
                                    Value = new DateOnly(2024, 10, 28)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("242e3a01-6d8e-4c7a-94b7-e7767163566e"),
                                    Value = new DateOnly(2026, 6, 17)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("c72b81b9-c074-4698-ad65-395a8d9c223c"),
                                    Value = new DateOnly(2023, 3, 6)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("b6854d34-4395-47ac-8168-364c13039d34"),
                                    Value = new DateOnly(2026, 7, 29)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("9e7351cf-39a4-48ad-9539-ea89cf3e16dc"),
                                    Value = new DateOnly(2025, 6, 4)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("90e0b543-2da0-474c-a289-b29cfddf453b"),
                                    Value = new DateOnly(2023, 10, 7)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("92e23374-a39d-42ad-b6b0-5be57a649afc"),
                                    Value = new DateOnly(2023, 3, 4)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("2029f92e-81c4-46f7-a8a1-d4f11c5fc5a5"),
                                    Value = new DateOnly(2024, 9, 1)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("a20d3b85-3301-4eee-8541-6be816721489"),
                                    Value = new DateOnly(2027, 3, 28)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("1a54aa53-d7e1-4629-8fc0-76e39d05c159"),
                                    Value = new DateOnly(2022, 6, 2)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("1cf3a799-acca-4402-b11d-5e960e26e173"),
                                    Value = new DateOnly(2023, 4, 14)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("b02426f2-2001-4e3a-82c0-eacdb72d9047"),
                                    Value = new DateOnly(2022, 11, 10)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("34e2dca4-e2d4-45ad-b19b-2fb3e4528690"),
                                    Value = new DateOnly(2025, 7, 8)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("8423b65e-9aef-4c1e-84d4-0b87588582c6"),
                                    Value = new DateOnly(2027, 2, 6)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("8490e99d-9ab0-4adc-be13-4e30cd67e905"),
                                    Value = new DateOnly(2023, 12, 14)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("615af106-905d-49f8-8956-115d140fdd73"),
                                    Value = new DateOnly(2024, 4, 30)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("03e1d04c-b96e-45b4-bdb8-4761fbb89edd"),
                                    Value = new DateOnly(2024, 9, 26)
                                });
                        });

                    b.Navigation("Date")
                        .IsRequired();

                    b.Navigation("Temperature")
                        .IsRequired();
                });

            modelBuilder.Entity("RolePermissions", b =>
                {
                    b.HasOne("CleanArchitecture.Template.Domain.Users.Aggregates.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Template.Domain.Users.Aggregates.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.HasOne("CleanArchitecture.Template.Domain.Users.Aggregates.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Template.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
