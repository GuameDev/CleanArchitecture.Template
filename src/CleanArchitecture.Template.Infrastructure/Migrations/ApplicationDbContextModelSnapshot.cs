// <auto-generated />
using System;
using CleanArchitecture.Template.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanArchitecture.Template.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.WeatherForecasts.WeatherForecast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WeatherForecasts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32084b7a-b93a-4c23-8fd4-57377de78e5b"),
                            CreatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4595),
                            Summary = "Warm",
                            UpdatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4595)
                        },
                        new
                        {
                            Id = new Guid("a98a1705-c525-450c-8f58-7065f4863598"),
                            CreatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4609),
                            Summary = "Sweltering",
                            UpdatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4609)
                        },
                        new
                        {
                            Id = new Guid("7e71704f-bbee-4fd3-8ba3-bb2308b820cc"),
                            CreatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4614),
                            Summary = "Sweltering",
                            UpdatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4614)
                        },
                        new
                        {
                            Id = new Guid("6a92bfca-6597-4e58-864d-f842dc2813f4"),
                            CreatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4618),
                            Summary = "Scorching",
                            UpdatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4618)
                        },
                        new
                        {
                            Id = new Guid("9b3c23ee-0433-4774-8cdd-21c5fc0a081f"),
                            CreatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4621),
                            Summary = "Unknown",
                            UpdatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4621)
                        },
                        new
                        {
                            Id = new Guid("8b9b3bfe-de05-4a25-a9df-705954a23bee"),
                            CreatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4629),
                            Summary = "Warm",
                            UpdatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4629)
                        },
                        new
                        {
                            Id = new Guid("ea3be4a3-426c-4f96-ba39-80b05669426b"),
                            CreatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4632),
                            Summary = "Hot",
                            UpdatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4632)
                        },
                        new
                        {
                            Id = new Guid("6325998e-c6e0-45ef-9990-73aa66952160"),
                            CreatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4636),
                            Summary = "Warm",
                            UpdatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4636)
                        },
                        new
                        {
                            Id = new Guid("46ff8b53-84a6-4ca5-b111-aaf70f4be516"),
                            CreatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4642),
                            Summary = "Cool",
                            UpdatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4642)
                        },
                        new
                        {
                            Id = new Guid("c6304d0a-6708-4e2d-8841-ee243a748694"),
                            CreatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4648),
                            Summary = "Cool",
                            UpdatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4648)
                        },
                        new
                        {
                            Id = new Guid("81a72c6f-f2ac-4920-a797-89b36203d88c"),
                            CreatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4652),
                            Summary = "Bracing",
                            UpdatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4652)
                        },
                        new
                        {
                            Id = new Guid("34a3834b-05f6-4b17-91da-ea35eb362241"),
                            CreatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4655),
                            Summary = "Cool",
                            UpdatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4655)
                        },
                        new
                        {
                            Id = new Guid("e38eb104-9460-4fe1-97b1-e7b4d64d6ae8"),
                            CreatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4658),
                            Summary = "Freezing",
                            UpdatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4658)
                        },
                        new
                        {
                            Id = new Guid("22d9980c-eced-4e6f-b640-defc605b0083"),
                            CreatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4661),
                            Summary = "Cool",
                            UpdatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4661)
                        },
                        new
                        {
                            Id = new Guid("b137656c-0c66-4ec5-8ffc-66e0cce9ae8f"),
                            CreatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4664),
                            Summary = "Balmy",
                            UpdatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4664)
                        },
                        new
                        {
                            Id = new Guid("adef71eb-e132-4a5f-ac46-8950a9ace635"),
                            CreatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4668),
                            Summary = "Freezing",
                            UpdatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4668)
                        },
                        new
                        {
                            Id = new Guid("8c44ad18-bf42-4e6a-87e5-897c4fdd0c83"),
                            CreatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4673),
                            Summary = "Scorching",
                            UpdatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4673)
                        },
                        new
                        {
                            Id = new Guid("374bd98b-d621-4d3c-b7d6-8e8d80a29cb3"),
                            CreatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4678),
                            Summary = "Hot",
                            UpdatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4678)
                        },
                        new
                        {
                            Id = new Guid("10a5461d-5f6e-421f-981b-5baee57e7b81"),
                            CreatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4682),
                            Summary = "Cool",
                            UpdatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4682)
                        },
                        new
                        {
                            Id = new Guid("8519ad1d-a316-48c4-8faa-3c912e0dd6e6"),
                            CreatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4685),
                            Summary = "Balmy",
                            UpdatedDate = new DateTime(2024, 10, 13, 16, 7, 42, 674, DateTimeKind.Local).AddTicks(4685)
                        });
                });

            modelBuilder.Entity("Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b5b753f-0eb8-4ba5-befd-3625df946efb"),
                            CreatedDate = new DateTime(2024, 10, 13, 14, 7, 42, 674, DateTimeKind.Utc).AddTicks(5090),
                            Description = "Can read data",
                            Name = "Read",
                            UpdatedDate = new DateTime(2024, 10, 13, 14, 7, 42, 674, DateTimeKind.Utc).AddTicks(5090)
                        },
                        new
                        {
                            Id = new Guid("dec0a8b0-488c-45e9-b947-610159067013"),
                            CreatedDate = new DateTime(2024, 10, 13, 14, 7, 42, 674, DateTimeKind.Utc).AddTicks(5090),
                            Description = "Can modify data",
                            Name = "Write",
                            UpdatedDate = new DateTime(2024, 10, 13, 14, 7, 42, 674, DateTimeKind.Utc).AddTicks(5090)
                        },
                        new
                        {
                            Id = new Guid("798b3227-f830-4ad7-bae3-a48412f73024"),
                            CreatedDate = new DateTime(2024, 10, 13, 14, 7, 42, 674, DateTimeKind.Utc).AddTicks(5090),
                            Description = "Can manage users",
                            Name = "ManageUsers",
                            UpdatedDate = new DateTime(2024, 10, 13, 14, 7, 42, 674, DateTimeKind.Utc).AddTicks(5090)
                        },
                        new
                        {
                            Id = new Guid("5897a698-c9de-4539-891a-fafdb7cfb6b2"),
                            CreatedDate = new DateTime(2024, 10, 13, 14, 7, 42, 674, DateTimeKind.Utc).AddTicks(5090),
                            Description = "Can manage roles and permissions",
                            Name = "ManageRoles",
                            UpdatedDate = new DateTime(2024, 10, 13, 14, 7, 42, 674, DateTimeKind.Utc).AddTicks(5090)
                        },
                        new
                        {
                            Id = new Guid("4c30daa1-e676-4adb-80d4-39b89fe66b38"),
                            CreatedDate = new DateTime(2024, 10, 13, 14, 7, 42, 674, DateTimeKind.Utc).AddTicks(5090),
                            Description = "Can view the dashboard",
                            Name = "ViewDashboard",
                            UpdatedDate = new DateTime(2024, 10, 13, 14, 7, 42, 674, DateTimeKind.Utc).AddTicks(5090)
                        });
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9b6afdaa-cf3f-4316-b647-e05d9ae34990"),
                            CreatedDate = new DateTime(2024, 10, 13, 14, 7, 42, 674, DateTimeKind.Utc).AddTicks(5090),
                            RoleName = "Admin",
                            UpdatedDate = new DateTime(2024, 10, 13, 14, 7, 42, 674, DateTimeKind.Utc).AddTicks(5090)
                        },
                        new
                        {
                            Id = new Guid("72df50b1-b6c6-4a04-b2f5-80938ff0bbcd"),
                            CreatedDate = new DateTime(2024, 10, 13, 14, 7, 42, 674, DateTimeKind.Utc).AddTicks(5090),
                            RoleName = "User",
                            UpdatedDate = new DateTime(2024, 10, 13, 14, 7, 42, 674, DateTimeKind.Utc).AddTicks(5090)
                        });
                });

            modelBuilder.Entity("RolePermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionId = new Guid("4b5b753f-0eb8-4ba5-befd-3625df946efb"),
                            RoleId = new Guid("9b6afdaa-cf3f-4316-b647-e05d9ae34990")
                        },
                        new
                        {
                            Id = 2,
                            PermissionId = new Guid("dec0a8b0-488c-45e9-b947-610159067013"),
                            RoleId = new Guid("9b6afdaa-cf3f-4316-b647-e05d9ae34990")
                        },
                        new
                        {
                            Id = 3,
                            PermissionId = new Guid("798b3227-f830-4ad7-bae3-a48412f73024"),
                            RoleId = new Guid("9b6afdaa-cf3f-4316-b647-e05d9ae34990")
                        },
                        new
                        {
                            Id = 4,
                            PermissionId = new Guid("5897a698-c9de-4539-891a-fafdb7cfb6b2"),
                            RoleId = new Guid("9b6afdaa-cf3f-4316-b647-e05d9ae34990")
                        },
                        new
                        {
                            Id = 5,
                            PermissionId = new Guid("4c30daa1-e676-4adb-80d4-39b89fe66b38"),
                            RoleId = new Guid("9b6afdaa-cf3f-4316-b647-e05d9ae34990")
                        },
                        new
                        {
                            Id = 6,
                            PermissionId = new Guid("4b5b753f-0eb8-4ba5-befd-3625df946efb"),
                            RoleId = new Guid("72df50b1-b6c6-4a04-b2f5-80938ff0bbcd")
                        });
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.User", b =>
                {
                    b.OwnsOne("CleanArchitecture.Template.Domain.Users.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName1");

                            b1.Property<string>("LastName2")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName2");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("CleanArchitecture.Template.Domain.Users.ValueObjects.Username", "Username", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Username");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("Username")
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.WeatherForecasts.WeatherForecast", b =>
                {
                    b.OwnsOne("CleanArchitecture.Template.Domain.WeatherForecasts.ValueObjects.Temperature", "Temperature", b1 =>
                        {
                            b1.Property<Guid>("WeatherForecastId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("TemperatureType");

                            b1.Property<double>("Value")
                                .HasColumnType("float")
                                .HasColumnName("TemperatureValue");

                            b1.HasKey("WeatherForecastId");

                            b1.ToTable("WeatherForecasts");

                            b1.WithOwner()
                                .HasForeignKey("WeatherForecastId");

                            b1.HasData(
                                new
                                {
                                    WeatherForecastId = new Guid("32084b7a-b93a-4c23-8fd4-57377de78e5b"),
                                    Type = "Celsius",
                                    Value = 15.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("a98a1705-c525-450c-8f58-7065f4863598"),
                                    Type = "Celsius",
                                    Value = -1.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("7e71704f-bbee-4fd3-8ba3-bb2308b820cc"),
                                    Type = "Fahrenheit",
                                    Value = 23.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("6a92bfca-6597-4e58-864d-f842dc2813f4"),
                                    Type = "Fahrenheit",
                                    Value = 13.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("9b3c23ee-0433-4774-8cdd-21c5fc0a081f"),
                                    Type = "Celsius",
                                    Value = 28.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("8b9b3bfe-de05-4a25-a9df-705954a23bee"),
                                    Type = "Fahrenheit",
                                    Value = 17.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("ea3be4a3-426c-4f96-ba39-80b05669426b"),
                                    Type = "Fahrenheit",
                                    Value = 31.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("6325998e-c6e0-45ef-9990-73aa66952160"),
                                    Type = "Fahrenheit",
                                    Value = -1.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("46ff8b53-84a6-4ca5-b111-aaf70f4be516"),
                                    Type = "Celsius",
                                    Value = 27.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("c6304d0a-6708-4e2d-8841-ee243a748694"),
                                    Type = "Celsius",
                                    Value = -4.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("81a72c6f-f2ac-4920-a797-89b36203d88c"),
                                    Type = "Fahrenheit",
                                    Value = 18.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("34a3834b-05f6-4b17-91da-ea35eb362241"),
                                    Type = "Fahrenheit",
                                    Value = 28.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("e38eb104-9460-4fe1-97b1-e7b4d64d6ae8"),
                                    Type = "Celsius",
                                    Value = -2.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("22d9980c-eced-4e6f-b640-defc605b0083"),
                                    Type = "Fahrenheit",
                                    Value = -5.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("b137656c-0c66-4ec5-8ffc-66e0cce9ae8f"),
                                    Type = "Celsius",
                                    Value = 19.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("adef71eb-e132-4a5f-ac46-8950a9ace635"),
                                    Type = "Celsius",
                                    Value = 24.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("8c44ad18-bf42-4e6a-87e5-897c4fdd0c83"),
                                    Type = "Fahrenheit",
                                    Value = -1.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("374bd98b-d621-4d3c-b7d6-8e8d80a29cb3"),
                                    Type = "Fahrenheit",
                                    Value = 16.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("10a5461d-5f6e-421f-981b-5baee57e7b81"),
                                    Type = "Celsius",
                                    Value = 31.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("8519ad1d-a316-48c4-8faa-3c912e0dd6e6"),
                                    Type = "Celsius",
                                    Value = 8.0
                                });
                        });

                    b.OwnsOne("CleanArchitecture.Template.Domain.WeatherForecasts.ValueObjects.WeatherDate", "Date", b1 =>
                        {
                            b1.Property<Guid>("WeatherForecastId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateOnly>("Value")
                                .HasColumnType("date")
                                .HasColumnName("Date");

                            b1.HasKey("WeatherForecastId");

                            b1.ToTable("WeatherForecasts");

                            b1.WithOwner()
                                .HasForeignKey("WeatherForecastId");

                            b1.HasData(
                                new
                                {
                                    WeatherForecastId = new Guid("32084b7a-b93a-4c23-8fd4-57377de78e5b"),
                                    Value = new DateOnly(2022, 11, 26)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("a98a1705-c525-450c-8f58-7065f4863598"),
                                    Value = new DateOnly(2023, 11, 20)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("7e71704f-bbee-4fd3-8ba3-bb2308b820cc"),
                                    Value = new DateOnly(2026, 10, 28)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("6a92bfca-6597-4e58-864d-f842dc2813f4"),
                                    Value = new DateOnly(2027, 1, 17)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("9b3c23ee-0433-4774-8cdd-21c5fc0a081f"),
                                    Value = new DateOnly(2022, 12, 26)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("8b9b3bfe-de05-4a25-a9df-705954a23bee"),
                                    Value = new DateOnly(2023, 1, 29)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("ea3be4a3-426c-4f96-ba39-80b05669426b"),
                                    Value = new DateOnly(2024, 5, 30)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("6325998e-c6e0-45ef-9990-73aa66952160"),
                                    Value = new DateOnly(2026, 3, 13)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("46ff8b53-84a6-4ca5-b111-aaf70f4be516"),
                                    Value = new DateOnly(2024, 5, 29)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("c6304d0a-6708-4e2d-8841-ee243a748694"),
                                    Value = new DateOnly(2023, 5, 9)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("81a72c6f-f2ac-4920-a797-89b36203d88c"),
                                    Value = new DateOnly(2026, 1, 27)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("34a3834b-05f6-4b17-91da-ea35eb362241"),
                                    Value = new DateOnly(2025, 5, 13)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("e38eb104-9460-4fe1-97b1-e7b4d64d6ae8"),
                                    Value = new DateOnly(2025, 6, 28)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("22d9980c-eced-4e6f-b640-defc605b0083"),
                                    Value = new DateOnly(2024, 6, 13)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("b137656c-0c66-4ec5-8ffc-66e0cce9ae8f"),
                                    Value = new DateOnly(2026, 5, 14)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("adef71eb-e132-4a5f-ac46-8950a9ace635"),
                                    Value = new DateOnly(2026, 6, 23)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("8c44ad18-bf42-4e6a-87e5-897c4fdd0c83"),
                                    Value = new DateOnly(2024, 8, 8)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("374bd98b-d621-4d3c-b7d6-8e8d80a29cb3"),
                                    Value = new DateOnly(2026, 10, 13)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("10a5461d-5f6e-421f-981b-5baee57e7b81"),
                                    Value = new DateOnly(2022, 12, 15)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("8519ad1d-a316-48c4-8faa-3c912e0dd6e6"),
                                    Value = new DateOnly(2023, 10, 14)
                                });
                        });

                    b.Navigation("Date")
                        .IsRequired();

                    b.Navigation("Temperature")
                        .IsRequired();
                });

            modelBuilder.Entity("RolePermissions", b =>
                {
                    b.HasOne("Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.HasOne("Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Template.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
