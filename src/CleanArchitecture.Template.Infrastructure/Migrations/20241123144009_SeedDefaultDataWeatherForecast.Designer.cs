// <auto-generated />
using System;
using CleanArchitecture.Template.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanArchitecture.Template.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241123144009_SeedDefaultDataWeatherForecast")]
    partial class SeedDefaultDataWeatherForecast
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.Aggregates.Permissions.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.Aggregates.RefreshTokens.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.Aggregates.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.WeatherForecasts.WeatherForecast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WeatherForecasts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8712d094-a4bf-4abf-974d-d3b7fa881d52"),
                            CreatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(393),
                            Summary = "Mild",
                            UpdatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(393)
                        },
                        new
                        {
                            Id = new Guid("0c1cec78-ea45-444b-a500-8fc7761a4fe1"),
                            CreatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(404),
                            Summary = "Scorching",
                            UpdatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(404)
                        },
                        new
                        {
                            Id = new Guid("8273e1bd-fc99-47f3-805b-f7a7290a7c8c"),
                            CreatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(410),
                            Summary = "Hot",
                            UpdatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(410)
                        },
                        new
                        {
                            Id = new Guid("270b6a65-eaee-4a49-8a41-f15ba0a093e8"),
                            CreatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(415),
                            Summary = "Sweltering",
                            UpdatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(415)
                        },
                        new
                        {
                            Id = new Guid("760faed7-de9f-4d31-9f5f-6ead04862b4e"),
                            CreatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(420),
                            Summary = "Mild",
                            UpdatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(420)
                        },
                        new
                        {
                            Id = new Guid("25798d45-d9ac-48c1-8e96-46b184ebbedd"),
                            CreatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(428),
                            Summary = "Unknown",
                            UpdatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(428)
                        },
                        new
                        {
                            Id = new Guid("1d428048-92f0-42cd-a381-0c12acc5dc61"),
                            CreatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(435),
                            Summary = "Freezing",
                            UpdatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(435)
                        },
                        new
                        {
                            Id = new Guid("157d9d0e-329f-4a40-94da-a79ab5fe9b69"),
                            CreatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(440),
                            Summary = "Freezing",
                            UpdatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(440)
                        },
                        new
                        {
                            Id = new Guid("6e456178-6db8-425b-9bfc-de9ccad22c7d"),
                            CreatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(478),
                            Summary = "Warm",
                            UpdatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(478)
                        },
                        new
                        {
                            Id = new Guid("646b86ee-9ddc-41ab-b562-d38c53c2280b"),
                            CreatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(489),
                            Summary = "Scorching",
                            UpdatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(489)
                        },
                        new
                        {
                            Id = new Guid("b1e542bd-1323-473b-9d07-d2cd2786fa5b"),
                            CreatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(494),
                            Summary = "Hot",
                            UpdatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(494)
                        },
                        new
                        {
                            Id = new Guid("15593239-e01d-4dd9-b9a5-5074c08ce3ad"),
                            CreatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(499),
                            Summary = "Bracing",
                            UpdatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(499)
                        },
                        new
                        {
                            Id = new Guid("0d02b865-28c7-40ca-91ce-14155cfc02bd"),
                            CreatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(503),
                            Summary = "Bracing",
                            UpdatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(503)
                        },
                        new
                        {
                            Id = new Guid("546cf3bb-268d-4446-ae25-6240bb0cfbaf"),
                            CreatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(508),
                            Summary = "Balmy",
                            UpdatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(508)
                        },
                        new
                        {
                            Id = new Guid("8e85b4b9-88ac-4bc8-8692-d7b1ef1f039e"),
                            CreatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(515),
                            Summary = "Cool",
                            UpdatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(515)
                        },
                        new
                        {
                            Id = new Guid("bcd9b555-55bb-4e3b-b0a7-8c5d285443b1"),
                            CreatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(519),
                            Summary = "Chilly",
                            UpdatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(519)
                        },
                        new
                        {
                            Id = new Guid("4d27b960-5474-40b1-9f24-7ff3eb02cf04"),
                            CreatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(524),
                            Summary = "Freezing",
                            UpdatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(524)
                        },
                        new
                        {
                            Id = new Guid("9381fdc9-2d64-4afb-ad17-7b70eb44e1d5"),
                            CreatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(532),
                            Summary = "Cool",
                            UpdatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(532)
                        },
                        new
                        {
                            Id = new Guid("fb2c192f-e32c-477e-b736-3049586fdb92"),
                            CreatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(536),
                            Summary = "Balmy",
                            UpdatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(536)
                        },
                        new
                        {
                            Id = new Guid("cf2f9cbc-0b30-46b9-9ad5-c7fc50130f58"),
                            CreatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(541),
                            Summary = "Bracing",
                            UpdatedDate = new DateTime(2024, 11, 23, 15, 40, 8, 986, DateTimeKind.Local).AddTicks(541)
                        });
                });

            modelBuilder.Entity("RolePermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.Aggregates.RefreshTokens.RefreshToken", b =>
                {
                    b.HasOne("CleanArchitecture.Template.Domain.Users.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.User", b =>
                {
                    b.OwnsOne("CleanArchitecture.Template.Domain.Users.ValueObjects.FullNames.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName1");

                            b1.Property<string>("LastName2")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName2");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("CleanArchitecture.Template.Domain.Users.ValueObjects.Usernames.Username", "Username", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Username");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("Username")
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.WeatherForecasts.WeatherForecast", b =>
                {
                    b.OwnsOne("CleanArchitecture.Template.Domain.WeatherForecasts.ValueObjects.Temperature", "Temperature", b1 =>
                        {
                            b1.Property<Guid>("WeatherForecastId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("TemperatureType");

                            b1.Property<double>("Value")
                                .HasColumnType("float")
                                .HasColumnName("TemperatureValue");

                            b1.HasKey("WeatherForecastId");

                            b1.ToTable("WeatherForecasts");

                            b1.WithOwner()
                                .HasForeignKey("WeatherForecastId");

                            b1.HasData(
                                new
                                {
                                    WeatherForecastId = new Guid("8712d094-a4bf-4abf-974d-d3b7fa881d52"),
                                    Type = "Fahrenheit",
                                    Value = -1.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("0c1cec78-ea45-444b-a500-8fc7761a4fe1"),
                                    Type = "Celsius",
                                    Value = 20.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("8273e1bd-fc99-47f3-805b-f7a7290a7c8c"),
                                    Type = "Fahrenheit",
                                    Value = 3.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("270b6a65-eaee-4a49-8a41-f15ba0a093e8"),
                                    Type = "Fahrenheit",
                                    Value = 29.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("760faed7-de9f-4d31-9f5f-6ead04862b4e"),
                                    Type = "Fahrenheit",
                                    Value = 3.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("25798d45-d9ac-48c1-8e96-46b184ebbedd"),
                                    Type = "Celsius",
                                    Value = 17.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("1d428048-92f0-42cd-a381-0c12acc5dc61"),
                                    Type = "Fahrenheit",
                                    Value = 14.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("157d9d0e-329f-4a40-94da-a79ab5fe9b69"),
                                    Type = "Fahrenheit",
                                    Value = -5.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("6e456178-6db8-425b-9bfc-de9ccad22c7d"),
                                    Type = "Fahrenheit",
                                    Value = 4.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("646b86ee-9ddc-41ab-b562-d38c53c2280b"),
                                    Type = "Celsius",
                                    Value = -3.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("b1e542bd-1323-473b-9d07-d2cd2786fa5b"),
                                    Type = "Celsius",
                                    Value = 6.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("15593239-e01d-4dd9-b9a5-5074c08ce3ad"),
                                    Type = "Fahrenheit",
                                    Value = 17.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("0d02b865-28c7-40ca-91ce-14155cfc02bd"),
                                    Type = "Fahrenheit",
                                    Value = 15.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("546cf3bb-268d-4446-ae25-6240bb0cfbaf"),
                                    Type = "Fahrenheit",
                                    Value = 4.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("8e85b4b9-88ac-4bc8-8692-d7b1ef1f039e"),
                                    Type = "Celsius",
                                    Value = 18.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("bcd9b555-55bb-4e3b-b0a7-8c5d285443b1"),
                                    Type = "Celsius",
                                    Value = -5.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("4d27b960-5474-40b1-9f24-7ff3eb02cf04"),
                                    Type = "Celsius",
                                    Value = 16.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("9381fdc9-2d64-4afb-ad17-7b70eb44e1d5"),
                                    Type = "Fahrenheit",
                                    Value = 0.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("fb2c192f-e32c-477e-b736-3049586fdb92"),
                                    Type = "Celsius",
                                    Value = 13.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("cf2f9cbc-0b30-46b9-9ad5-c7fc50130f58"),
                                    Type = "Celsius",
                                    Value = -1.0
                                });
                        });

                    b.OwnsOne("CleanArchitecture.Template.Domain.WeatherForecasts.ValueObjects.WeatherDate", "Date", b1 =>
                        {
                            b1.Property<Guid>("WeatherForecastId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateOnly>("Value")
                                .HasColumnType("date")
                                .HasColumnName("Date");

                            b1.HasKey("WeatherForecastId");

                            b1.ToTable("WeatherForecasts");

                            b1.WithOwner()
                                .HasForeignKey("WeatherForecastId");

                            b1.HasData(
                                new
                                {
                                    WeatherForecastId = new Guid("8712d094-a4bf-4abf-974d-d3b7fa881d52"),
                                    Value = new DateOnly(2023, 12, 31)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("0c1cec78-ea45-444b-a500-8fc7761a4fe1"),
                                    Value = new DateOnly(2023, 11, 24)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("8273e1bd-fc99-47f3-805b-f7a7290a7c8c"),
                                    Value = new DateOnly(2025, 4, 8)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("270b6a65-eaee-4a49-8a41-f15ba0a093e8"),
                                    Value = new DateOnly(2022, 3, 18)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("760faed7-de9f-4d31-9f5f-6ead04862b4e"),
                                    Value = new DateOnly(2025, 6, 4)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("25798d45-d9ac-48c1-8e96-46b184ebbedd"),
                                    Value = new DateOnly(2024, 1, 10)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("1d428048-92f0-42cd-a381-0c12acc5dc61"),
                                    Value = new DateOnly(2023, 3, 18)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("157d9d0e-329f-4a40-94da-a79ab5fe9b69"),
                                    Value = new DateOnly(2026, 9, 7)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("6e456178-6db8-425b-9bfc-de9ccad22c7d"),
                                    Value = new DateOnly(2023, 7, 31)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("646b86ee-9ddc-41ab-b562-d38c53c2280b"),
                                    Value = new DateOnly(2023, 10, 10)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("b1e542bd-1323-473b-9d07-d2cd2786fa5b"),
                                    Value = new DateOnly(2027, 3, 23)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("15593239-e01d-4dd9-b9a5-5074c08ce3ad"),
                                    Value = new DateOnly(2023, 9, 12)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("0d02b865-28c7-40ca-91ce-14155cfc02bd"),
                                    Value = new DateOnly(2024, 3, 30)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("546cf3bb-268d-4446-ae25-6240bb0cfbaf"),
                                    Value = new DateOnly(2022, 6, 6)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("8e85b4b9-88ac-4bc8-8692-d7b1ef1f039e"),
                                    Value = new DateOnly(2027, 6, 13)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("bcd9b555-55bb-4e3b-b0a7-8c5d285443b1"),
                                    Value = new DateOnly(2027, 3, 23)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("4d27b960-5474-40b1-9f24-7ff3eb02cf04"),
                                    Value = new DateOnly(2025, 8, 6)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("9381fdc9-2d64-4afb-ad17-7b70eb44e1d5"),
                                    Value = new DateOnly(2024, 5, 18)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("fb2c192f-e32c-477e-b736-3049586fdb92"),
                                    Value = new DateOnly(2023, 7, 8)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("cf2f9cbc-0b30-46b9-9ad5-c7fc50130f58"),
                                    Value = new DateOnly(2022, 10, 12)
                                });
                        });

                    b.Navigation("Date")
                        .IsRequired();

                    b.Navigation("Temperature")
                        .IsRequired();
                });

            modelBuilder.Entity("RolePermissions", b =>
                {
                    b.HasOne("CleanArchitecture.Template.Domain.Users.Aggregates.Permissions.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Template.Domain.Users.Aggregates.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.HasOne("CleanArchitecture.Template.Domain.Users.Aggregates.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Template.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
