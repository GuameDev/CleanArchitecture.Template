// <auto-generated />
using System;
using CleanArchitecture.Template.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanArchitecture.Template.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241105124351_AddUserAggregateRootEntity")]
    partial class AddUserAggregateRootEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.Aggregates.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("73c375a3-dfa1-4a22-adfc-112c9b276108"),
                            CreatedDate = new DateTime(2024, 11, 5, 12, 43, 50, 768, DateTimeKind.Utc).AddTicks(8816),
                            Description = "Can read data",
                            Type = "Read",
                            UpdatedDate = new DateTime(2024, 11, 5, 12, 43, 50, 768, DateTimeKind.Utc).AddTicks(8816)
                        },
                        new
                        {
                            Id = new Guid("879a1ba3-37f3-4316-86ed-1ec91eb0c24d"),
                            CreatedDate = new DateTime(2024, 11, 5, 12, 43, 50, 768, DateTimeKind.Utc).AddTicks(8816),
                            Description = "Can modify data",
                            Type = "Write",
                            UpdatedDate = new DateTime(2024, 11, 5, 12, 43, 50, 768, DateTimeKind.Utc).AddTicks(8816)
                        },
                        new
                        {
                            Id = new Guid("f46bb1e6-0b4d-4ba1-9871-ca9619ff1eaf"),
                            CreatedDate = new DateTime(2024, 11, 5, 12, 43, 50, 768, DateTimeKind.Utc).AddTicks(8816),
                            Description = "Can manage users",
                            Type = "ManageUsers",
                            UpdatedDate = new DateTime(2024, 11, 5, 12, 43, 50, 768, DateTimeKind.Utc).AddTicks(8816)
                        },
                        new
                        {
                            Id = new Guid("09012410-aaba-4cad-9da6-d26ef27d7146"),
                            CreatedDate = new DateTime(2024, 11, 5, 12, 43, 50, 768, DateTimeKind.Utc).AddTicks(8816),
                            Description = "Can manage roles and permissions",
                            Type = "ManageRoles",
                            UpdatedDate = new DateTime(2024, 11, 5, 12, 43, 50, 768, DateTimeKind.Utc).AddTicks(8816)
                        },
                        new
                        {
                            Id = new Guid("c28901fa-f63b-45b8-8963-a3dfdbb58f1e"),
                            CreatedDate = new DateTime(2024, 11, 5, 12, 43, 50, 768, DateTimeKind.Utc).AddTicks(8816),
                            Description = "Can view the dashboard",
                            Type = "ViewDashboard",
                            UpdatedDate = new DateTime(2024, 11, 5, 12, 43, 50, 768, DateTimeKind.Utc).AddTicks(8816)
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.Aggregates.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0244ef5-f519-474b-8a46-e643a2338705"),
                            CreatedDate = new DateTime(2024, 11, 5, 12, 43, 50, 768, DateTimeKind.Utc).AddTicks(8816),
                            RoleName = "Admin",
                            UpdatedDate = new DateTime(2024, 11, 5, 12, 43, 50, 768, DateTimeKind.Utc).AddTicks(8816)
                        },
                        new
                        {
                            Id = new Guid("c0692c3c-6a31-4794-9dcf-08d7c732a158"),
                            CreatedDate = new DateTime(2024, 11, 5, 12, 43, 50, 768, DateTimeKind.Utc).AddTicks(8816),
                            RoleName = "User",
                            UpdatedDate = new DateTime(2024, 11, 5, 12, 43, 50, 768, DateTimeKind.Utc).AddTicks(8816)
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.WeatherForecasts.WeatherForecast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WeatherForecasts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("270413df-409e-4999-9d40-add7d748181c"),
                            CreatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8290),
                            Summary = "Scorching",
                            UpdatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8290)
                        },
                        new
                        {
                            Id = new Guid("0978f7a1-82b8-47c3-9c30-278ef80073f6"),
                            CreatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8303),
                            Summary = "Freezing",
                            UpdatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8303)
                        },
                        new
                        {
                            Id = new Guid("7ed22a52-213f-4641-9dba-49d0faed4ea4"),
                            CreatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8323),
                            Summary = "Balmy",
                            UpdatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8323)
                        },
                        new
                        {
                            Id = new Guid("f233b87c-38a6-4730-bc8f-5824ff96c553"),
                            CreatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8349),
                            Summary = "Warm",
                            UpdatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8349)
                        },
                        new
                        {
                            Id = new Guid("15d207e7-6541-452f-983b-6f862565e604"),
                            CreatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8353),
                            Summary = "Warm",
                            UpdatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8353)
                        },
                        new
                        {
                            Id = new Guid("f6c5e0a9-090f-4c54-873d-aadcf00b9930"),
                            CreatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8359),
                            Summary = "Balmy",
                            UpdatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8359)
                        },
                        new
                        {
                            Id = new Guid("84f1eeea-118a-44d4-9cb2-ec923558e47a"),
                            CreatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8363),
                            Summary = "Cool",
                            UpdatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8363)
                        },
                        new
                        {
                            Id = new Guid("9f966203-4d85-4d84-b779-6f015751fdb3"),
                            CreatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8367),
                            Summary = "Mild",
                            UpdatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8367)
                        },
                        new
                        {
                            Id = new Guid("25c006c3-ade9-42ac-914b-7ae2f7544b07"),
                            CreatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8370),
                            Summary = "Chilly",
                            UpdatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8370)
                        },
                        new
                        {
                            Id = new Guid("2adba033-dd8e-4662-9279-aacc29cb071d"),
                            CreatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8376),
                            Summary = "Balmy",
                            UpdatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8376)
                        },
                        new
                        {
                            Id = new Guid("ec67d8a0-dfca-4492-a041-21a97ea471af"),
                            CreatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8383),
                            Summary = "Cool",
                            UpdatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8383)
                        },
                        new
                        {
                            Id = new Guid("5eba0bc4-bbd7-44cd-bc4a-34c31f633eb9"),
                            CreatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8387),
                            Summary = "Hot",
                            UpdatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8387)
                        },
                        new
                        {
                            Id = new Guid("74d8aab9-9504-495d-87ee-d497a4dba8f6"),
                            CreatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8390),
                            Summary = "Scorching",
                            UpdatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8390)
                        },
                        new
                        {
                            Id = new Guid("537c8ca3-61b0-4394-b42a-355e2d750e8f"),
                            CreatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8394),
                            Summary = "Hot",
                            UpdatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8394)
                        },
                        new
                        {
                            Id = new Guid("9c515c4c-c6a0-4034-a03f-0b917bb31f20"),
                            CreatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8398),
                            Summary = "Warm",
                            UpdatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8398)
                        },
                        new
                        {
                            Id = new Guid("96b77b38-511f-4888-912c-6b0f6426f3ac"),
                            CreatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8401),
                            Summary = "Chilly",
                            UpdatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8401)
                        },
                        new
                        {
                            Id = new Guid("35a91504-5bca-4b85-aeb1-b91a6f4bec77"),
                            CreatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8405),
                            Summary = "Chilly",
                            UpdatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8405)
                        },
                        new
                        {
                            Id = new Guid("2cdf3933-097a-4707-8714-6403067c5d6b"),
                            CreatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8411),
                            Summary = "Mild",
                            UpdatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8411)
                        },
                        new
                        {
                            Id = new Guid("6dace619-cf85-4610-8c20-5c35e6b0a599"),
                            CreatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8416),
                            Summary = "Mild",
                            UpdatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8416)
                        },
                        new
                        {
                            Id = new Guid("81cb2ca3-5422-4431-b6bc-790da1860a56"),
                            CreatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8419),
                            Summary = "Sweltering",
                            UpdatedDate = new DateTime(2024, 11, 5, 13, 43, 50, 768, DateTimeKind.Local).AddTicks(8419)
                        });
                });

            modelBuilder.Entity("RolePermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionId = new Guid("73c375a3-dfa1-4a22-adfc-112c9b276108"),
                            RoleId = new Guid("f0244ef5-f519-474b-8a46-e643a2338705")
                        },
                        new
                        {
                            Id = 2,
                            PermissionId = new Guid("879a1ba3-37f3-4316-86ed-1ec91eb0c24d"),
                            RoleId = new Guid("f0244ef5-f519-474b-8a46-e643a2338705")
                        },
                        new
                        {
                            Id = 3,
                            PermissionId = new Guid("f46bb1e6-0b4d-4ba1-9871-ca9619ff1eaf"),
                            RoleId = new Guid("f0244ef5-f519-474b-8a46-e643a2338705")
                        },
                        new
                        {
                            Id = 4,
                            PermissionId = new Guid("09012410-aaba-4cad-9da6-d26ef27d7146"),
                            RoleId = new Guid("f0244ef5-f519-474b-8a46-e643a2338705")
                        },
                        new
                        {
                            Id = 5,
                            PermissionId = new Guid("c28901fa-f63b-45b8-8963-a3dfdbb58f1e"),
                            RoleId = new Guid("f0244ef5-f519-474b-8a46-e643a2338705")
                        },
                        new
                        {
                            Id = 6,
                            PermissionId = new Guid("73c375a3-dfa1-4a22-adfc-112c9b276108"),
                            RoleId = new Guid("c0692c3c-6a31-4794-9dcf-08d7c732a158")
                        });
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.User", b =>
                {
                    b.OwnsOne("CleanArchitecture.Template.Domain.Users.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName1");

                            b1.Property<string>("LastName2")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName2");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("CleanArchitecture.Template.Domain.Users.ValueObjects.Username", "Username", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Username");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("Username")
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.WeatherForecasts.WeatherForecast", b =>
                {
                    b.OwnsOne("CleanArchitecture.Template.Domain.WeatherForecasts.ValueObjects.Temperature", "Temperature", b1 =>
                        {
                            b1.Property<Guid>("WeatherForecastId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("TemperatureType");

                            b1.Property<double>("Value")
                                .HasColumnType("float")
                                .HasColumnName("TemperatureValue");

                            b1.HasKey("WeatherForecastId");

                            b1.ToTable("WeatherForecasts");

                            b1.WithOwner()
                                .HasForeignKey("WeatherForecastId");

                            b1.HasData(
                                new
                                {
                                    WeatherForecastId = new Guid("270413df-409e-4999-9d40-add7d748181c"),
                                    Type = "Celsius",
                                    Value = 22.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("0978f7a1-82b8-47c3-9c30-278ef80073f6"),
                                    Type = "Fahrenheit",
                                    Value = 24.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("7ed22a52-213f-4641-9dba-49d0faed4ea4"),
                                    Type = "Fahrenheit",
                                    Value = 6.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("f233b87c-38a6-4730-bc8f-5824ff96c553"),
                                    Type = "Celsius",
                                    Value = 23.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("15d207e7-6541-452f-983b-6f862565e604"),
                                    Type = "Celsius",
                                    Value = 19.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("f6c5e0a9-090f-4c54-873d-aadcf00b9930"),
                                    Type = "Fahrenheit",
                                    Value = 6.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("84f1eeea-118a-44d4-9cb2-ec923558e47a"),
                                    Type = "Celsius",
                                    Value = 13.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("9f966203-4d85-4d84-b779-6f015751fdb3"),
                                    Type = "Celsius",
                                    Value = 20.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("25c006c3-ade9-42ac-914b-7ae2f7544b07"),
                                    Type = "Fahrenheit",
                                    Value = 0.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("2adba033-dd8e-4662-9279-aacc29cb071d"),
                                    Type = "Fahrenheit",
                                    Value = -5.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("ec67d8a0-dfca-4492-a041-21a97ea471af"),
                                    Type = "Celsius",
                                    Value = 0.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("5eba0bc4-bbd7-44cd-bc4a-34c31f633eb9"),
                                    Type = "Fahrenheit",
                                    Value = 13.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("74d8aab9-9504-495d-87ee-d497a4dba8f6"),
                                    Type = "Celsius",
                                    Value = 29.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("537c8ca3-61b0-4394-b42a-355e2d750e8f"),
                                    Type = "Fahrenheit",
                                    Value = -2.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("9c515c4c-c6a0-4034-a03f-0b917bb31f20"),
                                    Type = "Celsius",
                                    Value = 3.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("96b77b38-511f-4888-912c-6b0f6426f3ac"),
                                    Type = "Celsius",
                                    Value = 16.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("35a91504-5bca-4b85-aeb1-b91a6f4bec77"),
                                    Type = "Fahrenheit",
                                    Value = 31.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("2cdf3933-097a-4707-8714-6403067c5d6b"),
                                    Type = "Fahrenheit",
                                    Value = 22.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("6dace619-cf85-4610-8c20-5c35e6b0a599"),
                                    Type = "Fahrenheit",
                                    Value = 34.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("81cb2ca3-5422-4431-b6bc-790da1860a56"),
                                    Type = "Fahrenheit",
                                    Value = 34.0
                                });
                        });

                    b.OwnsOne("CleanArchitecture.Template.Domain.WeatherForecasts.ValueObjects.WeatherDate", "Date", b1 =>
                        {
                            b1.Property<Guid>("WeatherForecastId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateOnly>("Value")
                                .HasColumnType("date")
                                .HasColumnName("Date");

                            b1.HasKey("WeatherForecastId");

                            b1.ToTable("WeatherForecasts");

                            b1.WithOwner()
                                .HasForeignKey("WeatherForecastId");

                            b1.HasData(
                                new
                                {
                                    WeatherForecastId = new Guid("270413df-409e-4999-9d40-add7d748181c"),
                                    Value = new DateOnly(2025, 7, 20)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("0978f7a1-82b8-47c3-9c30-278ef80073f6"),
                                    Value = new DateOnly(2025, 8, 3)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("7ed22a52-213f-4641-9dba-49d0faed4ea4"),
                                    Value = new DateOnly(2026, 5, 29)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("f233b87c-38a6-4730-bc8f-5824ff96c553"),
                                    Value = new DateOnly(2022, 11, 1)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("15d207e7-6541-452f-983b-6f862565e604"),
                                    Value = new DateOnly(2027, 7, 15)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("f6c5e0a9-090f-4c54-873d-aadcf00b9930"),
                                    Value = new DateOnly(2023, 8, 25)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("84f1eeea-118a-44d4-9cb2-ec923558e47a"),
                                    Value = new DateOnly(2024, 8, 10)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("9f966203-4d85-4d84-b779-6f015751fdb3"),
                                    Value = new DateOnly(2024, 3, 30)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("25c006c3-ade9-42ac-914b-7ae2f7544b07"),
                                    Value = new DateOnly(2027, 5, 24)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("2adba033-dd8e-4662-9279-aacc29cb071d"),
                                    Value = new DateOnly(2026, 10, 22)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("ec67d8a0-dfca-4492-a041-21a97ea471af"),
                                    Value = new DateOnly(2023, 8, 1)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("5eba0bc4-bbd7-44cd-bc4a-34c31f633eb9"),
                                    Value = new DateOnly(2025, 3, 23)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("74d8aab9-9504-495d-87ee-d497a4dba8f6"),
                                    Value = new DateOnly(2024, 12, 23)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("537c8ca3-61b0-4394-b42a-355e2d750e8f"),
                                    Value = new DateOnly(2024, 5, 24)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("9c515c4c-c6a0-4034-a03f-0b917bb31f20"),
                                    Value = new DateOnly(2024, 10, 19)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("96b77b38-511f-4888-912c-6b0f6426f3ac"),
                                    Value = new DateOnly(2023, 1, 20)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("35a91504-5bca-4b85-aeb1-b91a6f4bec77"),
                                    Value = new DateOnly(2022, 4, 2)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("2cdf3933-097a-4707-8714-6403067c5d6b"),
                                    Value = new DateOnly(2024, 5, 24)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("6dace619-cf85-4610-8c20-5c35e6b0a599"),
                                    Value = new DateOnly(2025, 3, 2)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("81cb2ca3-5422-4431-b6bc-790da1860a56"),
                                    Value = new DateOnly(2025, 12, 7)
                                });
                        });

                    b.Navigation("Date")
                        .IsRequired();

                    b.Navigation("Temperature")
                        .IsRequired();
                });

            modelBuilder.Entity("RolePermissions", b =>
                {
                    b.HasOne("CleanArchitecture.Template.Domain.Users.Aggregates.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Template.Domain.Users.Aggregates.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.HasOne("CleanArchitecture.Template.Domain.Users.Aggregates.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Template.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
