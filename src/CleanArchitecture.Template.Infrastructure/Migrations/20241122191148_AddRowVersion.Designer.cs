// <auto-generated />
using System;
using CleanArchitecture.Template.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanArchitecture.Template.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241122191148_AddRowVersion")]
    partial class AddRowVersion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.Aggregates.Permissions.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3c11234-56b8-4e89-91f4-21e1e69e76fa"),
                            CreatedDate = new DateTime(2024, 11, 22, 19, 11, 47, 686, DateTimeKind.Utc).AddTicks(5631),
                            Description = "Can read data",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Type = "Read",
                            UpdatedDate = new DateTime(2024, 11, 22, 19, 11, 47, 686, DateTimeKind.Utc).AddTicks(5631)
                        },
                        new
                        {
                            Id = new Guid("d4b732bc-0a9d-420f-8c2d-5911dbe24d6d"),
                            CreatedDate = new DateTime(2024, 11, 22, 19, 11, 47, 686, DateTimeKind.Utc).AddTicks(5631),
                            Description = "Can modify data",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Type = "Write",
                            UpdatedDate = new DateTime(2024, 11, 22, 19, 11, 47, 686, DateTimeKind.Utc).AddTicks(5631)
                        },
                        new
                        {
                            Id = new Guid("e5f01b6d-1b3e-4919-9b24-7c3e61f1f91b"),
                            CreatedDate = new DateTime(2024, 11, 22, 19, 11, 47, 686, DateTimeKind.Utc).AddTicks(5631),
                            Description = "Can manage users",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Type = "ManageUsers",
                            UpdatedDate = new DateTime(2024, 11, 22, 19, 11, 47, 686, DateTimeKind.Utc).AddTicks(5631)
                        },
                        new
                        {
                            Id = new Guid("f6027a94-318d-4d13-b78f-9277cd3f7086"),
                            CreatedDate = new DateTime(2024, 11, 22, 19, 11, 47, 686, DateTimeKind.Utc).AddTicks(5631),
                            Description = "Can manage roles and permissions",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Type = "ManageRoles",
                            UpdatedDate = new DateTime(2024, 11, 22, 19, 11, 47, 686, DateTimeKind.Utc).AddTicks(5631)
                        },
                        new
                        {
                            Id = new Guid("a8b61357-15f2-48a1-9114-2d2d885de8c1"),
                            CreatedDate = new DateTime(2024, 11, 22, 19, 11, 47, 686, DateTimeKind.Utc).AddTicks(5631),
                            Description = "Can view the dashboard",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Type = "ViewDashboard",
                            UpdatedDate = new DateTime(2024, 11, 22, 19, 11, 47, 686, DateTimeKind.Utc).AddTicks(5631)
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.Aggregates.RefreshTokens.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.Aggregates.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a37f1b12-6d0c-4d52-a4e5-b84adf6d184c"),
                            CreatedDate = new DateTime(2024, 11, 22, 19, 11, 47, 686, DateTimeKind.Utc).AddTicks(5631),
                            RoleName = "Admin",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            UpdatedDate = new DateTime(2024, 11, 22, 19, 11, 47, 686, DateTimeKind.Utc).AddTicks(5631)
                        },
                        new
                        {
                            Id = new Guid("b2e8e3f6-c8f1-45db-8c7a-a7e14c680bfb"),
                            CreatedDate = new DateTime(2024, 11, 22, 19, 11, 47, 686, DateTimeKind.Utc).AddTicks(5631),
                            RoleName = "User",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            UpdatedDate = new DateTime(2024, 11, 22, 19, 11, 47, 686, DateTimeKind.Utc).AddTicks(5631)
                        });
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.WeatherForecasts.WeatherForecast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WeatherForecasts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d969799c-0ce6-44d4-9899-277ea9b6a160"),
                            CreatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(4889),
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Summary = "Sweltering",
                            UpdatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(4889)
                        },
                        new
                        {
                            Id = new Guid("df970055-9225-487b-b39a-a71640282a30"),
                            CreatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(4907),
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Summary = "Hot",
                            UpdatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(4907)
                        },
                        new
                        {
                            Id = new Guid("6ad8409c-4e18-4c7e-baca-aeb2f6e73e3f"),
                            CreatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(4912),
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Summary = "Freezing",
                            UpdatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(4912)
                        },
                        new
                        {
                            Id = new Guid("6414dcae-3530-4166-80d6-7920d889d557"),
                            CreatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(4917),
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Summary = "Balmy",
                            UpdatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(4917)
                        },
                        new
                        {
                            Id = new Guid("0aafd114-0bbd-40cd-94f9-499088828dc6"),
                            CreatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(4922),
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Summary = "Warm",
                            UpdatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(4922)
                        },
                        new
                        {
                            Id = new Guid("3b88b48f-efce-49c3-85ea-7d40cdcefec1"),
                            CreatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5000),
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Summary = "Balmy",
                            UpdatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5000)
                        },
                        new
                        {
                            Id = new Guid("f9da87a0-57ff-46c8-ae2f-29302b8b3775"),
                            CreatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5006),
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Summary = "Scorching",
                            UpdatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5006)
                        },
                        new
                        {
                            Id = new Guid("7feed608-3f4c-4aab-a9dc-5127809eb059"),
                            CreatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5011),
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Summary = "Hot",
                            UpdatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5011)
                        },
                        new
                        {
                            Id = new Guid("b39605c8-ca03-44c3-8e91-c9b20391ff35"),
                            CreatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5015),
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Summary = "Cool",
                            UpdatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5015)
                        },
                        new
                        {
                            Id = new Guid("9f9f6872-54aa-4d0f-b407-35735556160e"),
                            CreatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5023),
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Summary = "Scorching",
                            UpdatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5023)
                        },
                        new
                        {
                            Id = new Guid("ffb558ee-0624-4f1d-8b7f-7d6bb946b586"),
                            CreatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5028),
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Summary = "Unknown",
                            UpdatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5028)
                        },
                        new
                        {
                            Id = new Guid("526ce316-9b97-4dce-9897-92d8edb529be"),
                            CreatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5033),
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Summary = "Hot",
                            UpdatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5033)
                        },
                        new
                        {
                            Id = new Guid("e5a15d0b-10ef-43c8-9802-d8320df71529"),
                            CreatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5038),
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Summary = "Balmy",
                            UpdatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5038)
                        },
                        new
                        {
                            Id = new Guid("28b72b8e-7997-429e-838e-fe30497a1c41"),
                            CreatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5045),
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Summary = "Hot",
                            UpdatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5045)
                        },
                        new
                        {
                            Id = new Guid("5426bd61-af0c-4331-a6b1-804ed2dc50c7"),
                            CreatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5050),
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Summary = "Chilly",
                            UpdatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5050)
                        },
                        new
                        {
                            Id = new Guid("081bba58-52aa-4833-968c-b6b5d6fa418a"),
                            CreatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5055),
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Summary = "Unknown",
                            UpdatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5055)
                        },
                        new
                        {
                            Id = new Guid("c3e9b858-fb29-4f4a-89f4-ba94d010a02a"),
                            CreatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5060),
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Summary = "Freezing",
                            UpdatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5060)
                        },
                        new
                        {
                            Id = new Guid("e0730570-46e6-42c2-bf78-e142e705bb94"),
                            CreatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5068),
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Summary = "Balmy",
                            UpdatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5068)
                        },
                        new
                        {
                            Id = new Guid("ba3ce6e8-214c-46e2-8d05-7a079ca57a23"),
                            CreatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5072),
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Summary = "Mild",
                            UpdatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5072)
                        },
                        new
                        {
                            Id = new Guid("8618245a-56c4-4440-80f1-a322aad80cbc"),
                            CreatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5077),
                            RowVersion = new byte[] { 0, 0, 0, 0, 0 },
                            Summary = "Balmy",
                            UpdatedDate = new DateTime(2024, 11, 22, 20, 11, 47, 686, DateTimeKind.Local).AddTicks(5077)
                        });
                });

            modelBuilder.Entity("RolePermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionId = new Guid("c3c11234-56b8-4e89-91f4-21e1e69e76fa"),
                            RoleId = new Guid("a37f1b12-6d0c-4d52-a4e5-b84adf6d184c")
                        },
                        new
                        {
                            Id = 2,
                            PermissionId = new Guid("d4b732bc-0a9d-420f-8c2d-5911dbe24d6d"),
                            RoleId = new Guid("a37f1b12-6d0c-4d52-a4e5-b84adf6d184c")
                        },
                        new
                        {
                            Id = 3,
                            PermissionId = new Guid("e5f01b6d-1b3e-4919-9b24-7c3e61f1f91b"),
                            RoleId = new Guid("a37f1b12-6d0c-4d52-a4e5-b84adf6d184c")
                        },
                        new
                        {
                            Id = 4,
                            PermissionId = new Guid("f6027a94-318d-4d13-b78f-9277cd3f7086"),
                            RoleId = new Guid("a37f1b12-6d0c-4d52-a4e5-b84adf6d184c")
                        },
                        new
                        {
                            Id = 5,
                            PermissionId = new Guid("a8b61357-15f2-48a1-9114-2d2d885de8c1"),
                            RoleId = new Guid("a37f1b12-6d0c-4d52-a4e5-b84adf6d184c")
                        },
                        new
                        {
                            Id = 6,
                            PermissionId = new Guid("c3c11234-56b8-4e89-91f4-21e1e69e76fa"),
                            RoleId = new Guid("b2e8e3f6-c8f1-45db-8c7a-a7e14c680bfb")
                        });
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.Aggregates.RefreshTokens.RefreshToken", b =>
                {
                    b.HasOne("CleanArchitecture.Template.Domain.Users.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.User", b =>
                {
                    b.OwnsOne("CleanArchitecture.Template.Domain.Users.ValueObjects.FullNames.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName1");

                            b1.Property<string>("LastName2")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName2");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("CleanArchitecture.Template.Domain.Users.ValueObjects.Usernames.Username", "Username", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Username");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("Username")
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.WeatherForecasts.WeatherForecast", b =>
                {
                    b.OwnsOne("CleanArchitecture.Template.Domain.WeatherForecasts.ValueObjects.Temperature", "Temperature", b1 =>
                        {
                            b1.Property<Guid>("WeatherForecastId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("TemperatureType");

                            b1.Property<double>("Value")
                                .HasColumnType("float")
                                .HasColumnName("TemperatureValue");

                            b1.HasKey("WeatherForecastId");

                            b1.ToTable("WeatherForecasts");

                            b1.WithOwner()
                                .HasForeignKey("WeatherForecastId");

                            b1.HasData(
                                new
                                {
                                    WeatherForecastId = new Guid("d969799c-0ce6-44d4-9899-277ea9b6a160"),
                                    Type = "Celsius",
                                    Value = 19.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("df970055-9225-487b-b39a-a71640282a30"),
                                    Type = "Celsius",
                                    Value = 26.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("6ad8409c-4e18-4c7e-baca-aeb2f6e73e3f"),
                                    Type = "Celsius",
                                    Value = -4.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("6414dcae-3530-4166-80d6-7920d889d557"),
                                    Type = "Celsius",
                                    Value = 24.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("0aafd114-0bbd-40cd-94f9-499088828dc6"),
                                    Type = "Fahrenheit",
                                    Value = 28.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("3b88b48f-efce-49c3-85ea-7d40cdcefec1"),
                                    Type = "Celsius",
                                    Value = 14.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("f9da87a0-57ff-46c8-ae2f-29302b8b3775"),
                                    Type = "Celsius",
                                    Value = 33.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("7feed608-3f4c-4aab-a9dc-5127809eb059"),
                                    Type = "Celsius",
                                    Value = 25.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("b39605c8-ca03-44c3-8e91-c9b20391ff35"),
                                    Type = "Fahrenheit",
                                    Value = 0.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("9f9f6872-54aa-4d0f-b407-35735556160e"),
                                    Type = "Celsius",
                                    Value = 6.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("ffb558ee-0624-4f1d-8b7f-7d6bb946b586"),
                                    Type = "Celsius",
                                    Value = -5.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("526ce316-9b97-4dce-9897-92d8edb529be"),
                                    Type = "Fahrenheit",
                                    Value = -3.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("e5a15d0b-10ef-43c8-9802-d8320df71529"),
                                    Type = "Fahrenheit",
                                    Value = 31.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("28b72b8e-7997-429e-838e-fe30497a1c41"),
                                    Type = "Celsius",
                                    Value = 23.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("5426bd61-af0c-4331-a6b1-804ed2dc50c7"),
                                    Type = "Celsius",
                                    Value = 31.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("081bba58-52aa-4833-968c-b6b5d6fa418a"),
                                    Type = "Fahrenheit",
                                    Value = 6.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("c3e9b858-fb29-4f4a-89f4-ba94d010a02a"),
                                    Type = "Fahrenheit",
                                    Value = 5.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("e0730570-46e6-42c2-bf78-e142e705bb94"),
                                    Type = "Fahrenheit",
                                    Value = 34.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("ba3ce6e8-214c-46e2-8d05-7a079ca57a23"),
                                    Type = "Celsius",
                                    Value = 22.0
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("8618245a-56c4-4440-80f1-a322aad80cbc"),
                                    Type = "Fahrenheit",
                                    Value = 8.0
                                });
                        });

                    b.OwnsOne("CleanArchitecture.Template.Domain.WeatherForecasts.ValueObjects.WeatherDate", "Date", b1 =>
                        {
                            b1.Property<Guid>("WeatherForecastId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateOnly>("Value")
                                .HasColumnType("date")
                                .HasColumnName("Date");

                            b1.HasKey("WeatherForecastId");

                            b1.ToTable("WeatherForecasts");

                            b1.WithOwner()
                                .HasForeignKey("WeatherForecastId");

                            b1.HasData(
                                new
                                {
                                    WeatherForecastId = new Guid("d969799c-0ce6-44d4-9899-277ea9b6a160"),
                                    Value = new DateOnly(2024, 11, 24)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("df970055-9225-487b-b39a-a71640282a30"),
                                    Value = new DateOnly(2026, 12, 20)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("6ad8409c-4e18-4c7e-baca-aeb2f6e73e3f"),
                                    Value = new DateOnly(2023, 12, 18)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("6414dcae-3530-4166-80d6-7920d889d557"),
                                    Value = new DateOnly(2024, 1, 16)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("0aafd114-0bbd-40cd-94f9-499088828dc6"),
                                    Value = new DateOnly(2027, 2, 18)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("3b88b48f-efce-49c3-85ea-7d40cdcefec1"),
                                    Value = new DateOnly(2025, 1, 31)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("f9da87a0-57ff-46c8-ae2f-29302b8b3775"),
                                    Value = new DateOnly(2027, 3, 13)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("7feed608-3f4c-4aab-a9dc-5127809eb059"),
                                    Value = new DateOnly(2022, 5, 30)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("b39605c8-ca03-44c3-8e91-c9b20391ff35"),
                                    Value = new DateOnly(2023, 9, 15)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("9f9f6872-54aa-4d0f-b407-35735556160e"),
                                    Value = new DateOnly(2023, 6, 11)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("ffb558ee-0624-4f1d-8b7f-7d6bb946b586"),
                                    Value = new DateOnly(2025, 8, 23)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("526ce316-9b97-4dce-9897-92d8edb529be"),
                                    Value = new DateOnly(2022, 11, 15)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("e5a15d0b-10ef-43c8-9802-d8320df71529"),
                                    Value = new DateOnly(2024, 12, 11)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("28b72b8e-7997-429e-838e-fe30497a1c41"),
                                    Value = new DateOnly(2023, 11, 24)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("5426bd61-af0c-4331-a6b1-804ed2dc50c7"),
                                    Value = new DateOnly(2026, 4, 30)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("081bba58-52aa-4833-968c-b6b5d6fa418a"),
                                    Value = new DateOnly(2024, 1, 11)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("c3e9b858-fb29-4f4a-89f4-ba94d010a02a"),
                                    Value = new DateOnly(2026, 7, 30)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("e0730570-46e6-42c2-bf78-e142e705bb94"),
                                    Value = new DateOnly(2023, 5, 22)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("ba3ce6e8-214c-46e2-8d05-7a079ca57a23"),
                                    Value = new DateOnly(2022, 7, 12)
                                },
                                new
                                {
                                    WeatherForecastId = new Guid("8618245a-56c4-4440-80f1-a322aad80cbc"),
                                    Value = new DateOnly(2025, 5, 22)
                                });
                        });

                    b.Navigation("Date")
                        .IsRequired();

                    b.Navigation("Temperature")
                        .IsRequired();
                });

            modelBuilder.Entity("RolePermissions", b =>
                {
                    b.HasOne("CleanArchitecture.Template.Domain.Users.Aggregates.Permissions.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Template.Domain.Users.Aggregates.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.HasOne("CleanArchitecture.Template.Domain.Users.Aggregates.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Template.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitecture.Template.Domain.Users.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
